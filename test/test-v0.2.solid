+ \o55  +  \q33   *  \x2;

+ 007 +

"numeric separators"
100_000_000
+ \b1_0000_0000+
\d123_456_789
+ +\q123_012_3+
\o123_456_70
+ -\xba_da_55+
\zzyxwvu_6;

"not lex errors, but parse errors:"
\\b1_0040_0000
\\q123_142_3
\\o123_456_78

\ the following is an empty statement:
; \

+\b10 + "" + -\z27y + "" + \d301+

\x322 + '' + \z2r4k + '' + \o322;

\ an invalid integer:
\ \d39c

+5  *  3   *  2

^6  *  4   *  3;

5; x =+  '3';

y  =  3 *  2;

z = 3 *  ``;

'a string literal with a unicode \u{00_61} escape sequence with numeric separators'

+ 4 *


\ }} a string template tail token not preceded by a head or middle`

\ `A string template head token not followed by a middle or tail {{

8;

'
<html>
	<body class="js" id=\'top\'>
		hello
		\n
		world
		\
		&nbsp;
	</body>
</html>
'

+`
<html>
	<body class="js" id='top'>
		hello {{ 7 + 2 }} world
		hello \{\{ 7 + 2 \}\} world
		hello {{ '{{ 7 + 2 }}' }} world
	</body>
</html>
`;

\ words
this /is /a /word
/_words /_can  /_start /_with /_underscores
/_and0 /_can1 /contain2 /numb3rs

/a /word /_can  /repeat /_with /the /same /id;

let unfixed the_answer = 42;
let the_high_answer = the_answer * 10;
the_answer = the_answer - \z14;
