Decorate(Goal ::= #x02 #x03)
	:= SemanticNull {} []
Decorate(Goal ::= #x02 Statement__List #x03)
	:= SemanticGoal {} [
		Decorate(Statement__List),
	]

Decorate(Statement__List ::= Statement)
	:= SemanticStatementList {} [
		Decorate(Statement),
	]
Decorate(Statement__List ::= Statement__List Statement)
	:= SemanticStatementList {} [
		Spread(Decorate(Statement__List)),
		Decorate(Statement),
	]



Decorate(Statement ::= DeclarationVariable)
	:= Decorate(DeclarationVariable)
Decorate(Statement ::= StatementAssignment)
	:= Decorate(StatementAssignment)
Decorate(Statement ::= Expression ";")
	:= SemanticStatement {type: "expression"} [
		Decorate(Expression),
	]
Decorate(Statement ::= ";")
	:= SemanticStatement {type: "expression"} []

Decorate(DeclarationVariable ::= "let" IDENTIFIER "=" Expression ";")
	:= SemanticDeclaration {type: "variable", unfixed: false} [
		SemanticAssignee {} [
			Decorate(IDENTIFIER),
		],
		SemanticAssigned {} [
			Decorate(Expression),
		],
	]
Decorate(DeclarationVariable ::= "let" "unfixed" IDENTIFIER "=" Expression ";")
	:= SemanticDeclaration {type: "variable", unfixed: true} [
		SemanticAssignee {} [
			Decorate(IDENTIFIER),
		],
		SemanticAssigned {} [
			Decorate(Expression),
		],
	]

Decorate(StatementAssignment ::= IDENTIFIER "=" Expression ";")
	:= SemanticAssignment {} [
		SemanticAssignee {} [
			Decorate(IDENTIFIER),
		],
		SemanticAssigned {} [
			Decorate(Expression),
		],
	]



Decorate(Expression ::= ExpressionAdditive)
	:= Decorate(ExpressionAdditive)

Decorate(ExpressionAdditive ::= ExpressionMultiplicative)
	:= Decorate(ExpressionMultiplicative)
Decorate(ExpressionAdditive ::= ExpressionAdditive "+" ExpressionMultiplicative)
	:= SemanticExpression {operator: "+"} [
		Decorate(ExpressionAdditive),
		Decorate(ExpressionMultiplicative),
	]
Decorate(ExpressionAdditive ::= ExpressionAdditive "-" ExpressionMultiplicative)
	:= SemanticExpression {operator: "-"} [
		Decorate(ExpressionAdditive),
		Decorate(ExpressionMultiplicative),
	]

Decorate(ExpressionMultiplicative ::= ExpressionExponential)
	:= Decorate(ExpressionExponential)
Decorate(ExpressionMultiplicative ::= ExpressionMultiplicative "*" ExpressionExponential)
	:= SemanticExpression {operator: "*"} [
		Decorate(ExpressionMultiplicative),
		Decorate(ExpressionExponential),
	]
Decorate(ExpressionMultiplicative ::= ExpressionMultiplicative "/" ExpressionExponential)
	:= SemanticExpression {operator: "/"} [
		Decorate(ExpressionMultiplicative),
		Decorate(ExpressionExponential),
	]

Decorate(ExpressionExponential ::= ExpressionUnarySymbol)
	:= Decorate(ExpressionUnarySymbol)
Decorate(ExpressionExponential ::= ExpressionUnarySymbol "^" ExpressionExponential)
	:= SemanticExpression {operator: "^"} [
		Decorate(ExpressionUnarySymbol),
		Decorate(ExpressionExponential),
	]

Decorate(ExpressionUnarySymbol ::= ExpressionUnit)
	:= Decorate(ExpressionUnit)
Decorate(ExpressionUnarySymbol ::= "+" ExpressionUnarySymbol)
	:= SemanticExpression {operator: "+"} [
		Decorate(ExpressionUnarySymbol),
	]
Decorate(ExpressionUnarySymbol ::= "-" ExpressionUnarySymbol)
	:= SemanticExpression {operator: "-"} [
		Decorate(ExpressionUnarySymbol),
	]

Decorate(ExpressionUnit ::= IDENTIFIER)
	:= Decorate(IDENTIFIER)
Decorate(ExpressionUnit ::= PrimitiveLiteral)
	:= Decorate(PrimitiveLiteral)
Decorate(ExpressionUnit ::= StringTemplate)
	:= Decorate(StringTemplate)
Decorate(ExpressionUnit ::= "(" Expression ")")
	:= Decorate(Expression)



Decorate(StringTemplate ::= TEMPLATE_FULL)
	:= SemanticTemplate {type: "full"} [
		Decorate(TEMPLATE_FULL),
	]
Decorate(StringTemplate ::= TEMPLATE_HEAD TEMPLATE_TAIL)
	:= SemanticTemplate {type: "substitution"} [
		Decorate(TEMPLATE_HEAD),
		Decorate(TEMPLATE_TAIL),
	]
Decorate(StringTemplate ::= TEMPLATE_HEAD Expression TEMPLATE_TAIL)
	:= SemanticTemplate {type: "substitution"} [
		Decorate(TEMPLATE_HEAD),
		Decorate(Expression),
		Decorate(TEMPLATE_TAIL),
	]
Decorate(StringTemplate ::= TEMPLATE_HEAD StringTemplate__0__List TEMPLATE_TAIL)
	:= SemanticTemplate {type: "substitution"} [
		Decorate(TEMPLATE_HEAD),
		Spread(Decorate(StringTemplate__0__List))
		Decorate(TEMPLATE_TAIL),
	]
Decorate(StringTemplate ::= TEMPLATE_HEAD Expression StringTemplate__0__List TEMPLATE_TAIL)
	:= SemanticTemplate {type: "substitution"} [
		Decorate(TEMPLATE_HEAD),
		Decorate(Expression),
		Spread(Decorate(StringTemplate__0__List)),
		Decorate(TEMPLATE_TAIL),
	]

Decorate(StringTemplate__0__List ::= TEMPLATE_MIDDLE)
	:= SemanticTemplatePartial {} [
		Decorate(TEMPLATE_MIDDLE),
	]
Decorate(StringTemplate__0__List ::= TEMPLATE_MIDDLE Expression)
	:= SemanticTemplatePartial {} [
		Decorate(TEMPLATE_MIDDLE),
		Decorate(Expression),
	]
Decorate(StringTemplate__0__List ::= StringTemplate__0__List TEMPLATE_MIDDLE)
	:= SemanticTemplatePartial {} [
		Spread(Decorate(StringTemplate__0__List)),
		Decorate(TEMPLATE_MIDDLE),
	]
Decorate(StringTemplate__0__List ::= StringTemplate__0__List TEMPLATE_MIDDLE Expression)
	:= SemanticTemplatePartial {} [
		Spread(Decorate(StringTemplate__0__List)),
		Decorate(TEMPLATE_MIDDLE),
		Decorate(Expression),
	]



Decorate(PrimitiveLiteral ::= NUMBER)
	:= Decorate(NUMBER)
Decorate(PrimitiveLiteral ::= STRING)
	:= Decorate(STRING)



Decorate(STRING)
	::= SemanticConstant {value: SV(STRING)} []

Decorate(TEMPLATE_FULL)
	::= SemanticConstant {value: TV(TEMPLATE_FULL)} []
Decorate(TEMPLATE_HEAD)
	::= SemanticConstant {value: TV(TEMPLATE_HEAD)} []
Decorate(TEMPLATE_MIDDLE)
	::= SemanticConstant {value: TV(TEMPLATE_MIDDLE)} []
Decorate(TEMPLATE_TAIL)
	::= SemanticConstant {value: TV(TEMPLATE_TAIL)} []

Decorate(NUMBER)
	::= SemanticConstant {value: MV(NUMBER)} []

Decorate(IDENTIFIER)
	::= SemanticIdentifier {id: WV(IDENTIFIER)} []
