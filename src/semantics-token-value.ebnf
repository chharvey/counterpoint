SV(String ::= "'" "'")
	:= the empty array
SV(String ::= "'" StringChars "'")
	:= SV(StringChars)
SV(StringChars ::= [^'\#x03])
	:= UTF16Encoding(code point of that character)
SV(StringChars ::= [^'\#x03] StringChars)
	:= UTF16Encoding(code point of that character) followed by SV(StringChars)
SV(StringChars ::= "\" StringEscape)
	:= SV(StringEscape)
SV(StringChars ::= "\" StringEscape StringChars)
	:= SV(StringEscape) followed by SV(StringChars)
SV(StringChars ::= "\u")
	:= \x75 /* U+0075 LATIN SMALL LETTER U */
SV(StringChars ::= "\u" [^'{#x03'])
	:= \x75 followed by UTF16Encoding(code point of that character)
SV(StringChars ::= "\u" [^'{#x03'] StringChars)
	:= \x75 followed by UTF16Encoding(code point of that character) followed by SV(StringChars)
SV(StringEscape ::= EscapeChar)
	:= SV(EscapeChar)
SV(StringEscape ::= EscapeCode)
	:= SV(EscapeCode)
SV(StringEscape ::= LineContinuation)
	:= SV(LineContinuation)
SV(StringEscape ::= NonEscapeChar)
	:= SV(NonEscapeChar)
SV(EscapeChar ::= "'" | "\" | "s" | "t" | "n" | "r")
	:= given by the following map: {
		"'" : \x27, /* U+0027 APOSTROPHE           */
		"\" : \x5c, /* U+005C REVERSE SOLIDUS      */
		"s" : \x20, /* U+0020 SPACE                */
		"t" : \x09, /* U+0009 CHARACTER TABULATION */
		"n" : \x0a, /* U+000A LINE FEED (LF)       */
		"r" : \x0d, /* U+000D CARRIAGE RETURN (CR) */
	}
SV(EscapeCode ::= "u{" "}")
	:= \x0 /* U+0000 NULL */
SV(EscapeCode ::= "u{" DigitSequenceHex "}")
	:= UTF16Encoding(MV(DigitSequenceHex))
SV(LineContinuation ::= #x0A)
	:= \x20 /* U+0020 SPACE */
SV(NonEscapeChar ::= [^'\stnru#x0D#x0A#x03])
	:= UTF16Encoding(code point of that character)



TV(TemplateFull ::= "`" "`")
	:= the empty array
TV(TemplateFull ::= "`" TemplateCharsEndDelim "`")
	:= TV(TemplateCharsEndDelim)
TV(TemplateHead ::= "`" "{{")
	:= the empty array
TV(TemplateHead ::= "`" TemplateCharsEndInterp "{{")
	:= TV(TemplateCharsEndInterp)
TV(TemplateMiddle ::= "}}" "{{")
	:= the empty array
TV(TemplateMiddle ::= "}}" TemplateCharsEndInterp "{{")
	:= TV(TemplateCharsEndInterp)
TV(TemplateTail ::= "}}" "`")
	:= the empty array
TV(TemplateTail ::= "}}" TemplateCharsEndDelim "`")
	:= TV(TemplateCharsEndDelim)
TV(TemplateCharsEndDelim ::= [^`{\#x03])
	:= UTF16Encoding(code point of that character)
TV(TemplateCharsEndDelim ::= [^`{\#x03] TemplateCharsEndDelim)
	:= UTF16Encoding(code point of that character) followed by TV(TemplateCharsEndDelim)
TV(TemplateCharsEndDelim ::= "{"
	:= \x7b /* U+007B LEFT CURLY BRACKET */
TV(TemplateCharsEndDelim ::= "{" [^`{\#x03])
	:= \x7b followed by UTF16Encoding(code point of that character)
TV(TemplateCharsEndDelim ::= "{" [^`{\#x03] TemplateCharsEndDelim)
	:= \x7b followed by UTF16Encoding(code point of that character) followed by TV(TemplateCharsEndDelim)
TV(TemplateCharsEndDelim ::= "{" "\" [^`#x03])
	:= \x7b followed by \x5c followed by UTF16Encoding(code point of that character)
TV(TemplateCharsEndDelim ::= "{" "\" [^`#x03] TemplateCharsEndDelim)
	:= \x7b followed by \x5c followed by UTF16Encoding(code point of that character) followed by TV(TemplateCharsEndDelim)
TV(TemplateCharsEndDelim ::= "{" "\" "`")
	:= \x7b followed by \x60
TV(TemplateCharsEndDelim ::= "{" "\" "`" TemplateCharsEndDelim)
	:= \x7b followed by \x60 followed by TV(TemplateCharsEndDelim)
TV(TemplateCharsEndDelim ::= "\" [^`#x03])
	:= \x5c followed by UTF16Encoding(code point of that character)
TV(TemplateCharsEndDelim ::= "\" [^`#x03] TemplateCharsEndDelim)
	:= \x5c followed by UTF16Encoding(code point of that character) followed by TV(TemplateCharsEndDelim)
TV(TemplateCharsEndDelim ::= "\" "`")
	:= \x60 /* U+0060 GRAVE ACCENT */
TV(TemplateCharsEndDelim ::= "\" "`" TemplateCharsEndDelim)
	:= \x60 followed by TV(TemplateCharsEndDelim)
TV(TemplateCharsEndInterp ::= [^`{\#x03])
	:= UTF16Encoding(code point of that character)
TV(TemplateCharsEndInterp ::= [^`{\#x03] TemplateCharsEndInterp)
	:= UTF16Encoding(code point of that character) followed by TV(TemplateCharsEndInterp)
TV(TemplateCharsEndInterp ::= "{" [^`{\#x03])
	:= \x7b followed by UTF16Encoding(code point of that character)
TV(TemplateCharsEndInterp ::= "{" [^`{\#x03] TemplateCharsEndInterp)
	:= \x7b followed by UTF16Encoding(code point of that character) followed by TV(TemplateCharsEndInterp)
TV(TemplateCharsEndInterp ::= "{" "\" [^`#x03])
	:= \x7b followed by \x5c followed by UTF16Encoding(code point of that character)
TV(TemplateCharsEndInterp ::= "{" "\" [^`#x03] TemplateCharsEndInterp)
	:= \x7b followed by \x5c followed by UTF16Encoding(code point of that character) followed by TV(TemplateCharsEndInterp)
TV(TemplateCharsEndInterp ::= "{" "\" "`")
	:= \x7b followed by \x60
TV(TemplateCharsEndInterp ::= "{" "\" "`" TemplateCharsEndInterp)
	:= \x7b followed by \x60 followed by TV(TemplateCharsEndInterp)
TV(TemplateCharsEndInterp ::= "\")
	:= \x5c /* U+005C REVERSE SOLIDUS */
TV(TemplateCharsEndInterp ::= "\" [^`#x03])
	:= \x5c followed by UTF16Encoding(code point of that character)
TV(TemplateCharsEndInterp ::= "\" [^`#x03] TemplateCharsEndInterp)
	:= \x5c followed by UTF16Encoding(code point of that character) followed by TV(TemplateCharsEndInterp)
TV(TemplateCharsEndInterp ::= "\" "`")
	:= \x60 /* U+0060 GRAVE ACCENT */
TV(TemplateCharsEndInterp ::= "\" "`" TemplateCharsEndInterp)
	:= \x60 followed by TV(TemplateCharsEndInterp)



MV(Number ::= IntegerLiteral)
	:= MV(IntegerLiteral)
MV(Number ::= "+" IntegerLiteral)
	:= MV(IntegerLiteral)
MV(Number ::= "-" IntegerLiteral)
	:= -1 * MV(IntegerLiteral)

MV(IntegerLiteral ::= "\b"  DigitSequenceBin)
	:= MV(DigitSequenceBin)
MV(IntegerLiteral ::= "\q"  DigitSequenceQua)
	:= MV(DigitSequenceQua)
MV(IntegerLiteral ::= "\o"  DigitSequenceOct)
	:= MV(DigitSequenceOct)
MV(IntegerLiteral ::= "\d"? DigitSequenceDec)
	:= MV(DigitSequenceDec)
MV(IntegerLiteral ::= "\x"  DigitSequenceHex)
	:= MV(DigitSequenceHex)
MV(IntegerLiteral ::= "\z"  DigitSequenceHTD)
	:= MV(DigitSequenceHTD)

MV(DigitSequenceBin ::= [0-1])
	:= MV([0-1])
MV(DigitSequenceBin ::= DigitSequenceBin "_"? [0-1])
	:= 2 * MV(DigitSequenceBin) + MV([0-1])
MV(DigitSequenceQua ::= [0-3])
	:= MV([0-3])
MV(DigitSequenceQua ::= DigitSequenceQua "_"? [0-3])
	:= 4 * MV(DigitSequenceQua) + MV([0-3])
MV(DigitSequenceOct ::= [0-7])
	:= MV([0-7])
MV(DigitSequenceOct ::= DigitSequenceOct "_"? [0-7])
	:= 8 * MV(DigitSequenceOct) + MV([0-7])
MV(DigitSequenceDec ::= [0-9])
	:= MV([0-9])
MV(DigitSequenceDec ::= DigitSequenceDec "_"? [0-9])
	:= 10 * MV(DigitSequenceDec) + MV([0-9])
MV(DigitSequenceHex ::= [0-9a-f])
	:= MV([0-9a-f])
MV(DigitSequenceHex ::= DigitSequenceHex "_"? [0-9a-f])
	:= 16 * MV(DigitSequenceHex) + MV([0-9a-f])
MV(DigitSequenceHTD ::= [0-9a-z])
	:= MV([0-9a-z])
MV(DigitSequenceHTD ::= DigitSequenceHTD "_"? [0-9a-z])
	:= 36 * MV(DigitSequenceHTD) + MV([0-9a-z])

MV([0-9a-z] ::= "0")  :=  MV([0-9a-f] ::= "0")  :=  MV([0-9] ::= "0")  :=  MV([0-7] ::= "0")  :=  MV([0-3] ::= "0")  :=  MV([0-1] ::= "0")  :=  0
MV([0-9a-z] ::= "1")  :=  MV([0-9a-f] ::= "1")  :=  MV([0-9] ::= "1")  :=  MV([0-7] ::= "1")  :=  MV([0-3] ::= "1")  :=  MV([0-1] ::= "1")  :=  1
MV([0-9a-z] ::= "2")  :=  MV([0-9a-f] ::= "2")  :=  MV([0-9] ::= "2")  :=  MV([0-7] ::= "2")  :=  MV([0-3] ::= "2")  :=  2
MV([0-9a-z] ::= "3")  :=  MV([0-9a-f] ::= "3")  :=  MV([0-9] ::= "3")  :=  MV([0-7] ::= "3")  :=  MV([0-3] ::= "3")  :=  3
MV([0-9a-z] ::= "4")  :=  MV([0-9a-f] ::= "4")  :=  MV([0-9] ::= "4")  :=  MV([0-7] ::= "4")  :=  4
MV([0-9a-z] ::= "5")  :=  MV([0-9a-f] ::= "5")  :=  MV([0-9] ::= "5")  :=  MV([0-7] ::= "5")  :=  5
MV([0-9a-z] ::= "6")  :=  MV([0-9a-f] ::= "6")  :=  MV([0-9] ::= "6")  :=  MV([0-7] ::= "6")  :=  6
MV([0-9a-z] ::= "7")  :=  MV([0-9a-f] ::= "7")  :=  MV([0-9] ::= "7")  :=  MV([0-7] ::= "7")  :=  7
MV([0-9a-z] ::= "8")  :=  MV([0-9a-f] ::= "8")  :=  MV([0-9] ::= "8")  :=  8
MV([0-9a-z] ::= "9")  :=  MV([0-9a-f] ::= "9")  :=  MV([0-9] ::= "9")  :=  9
MV([0-9a-z] ::= "a")  :=  MV([0-9a-f] ::= "a")  :=  10
MV([0-9a-z] ::= "b")  :=  MV([0-9a-f] ::= "b")  :=  11
MV([0-9a-z] ::= "c")  :=  MV([0-9a-f] ::= "c")  :=  12
MV([0-9a-z] ::= "d")  :=  MV([0-9a-f] ::= "d")  :=  13
MV([0-9a-z] ::= "e")  :=  MV([0-9a-f] ::= "e")  :=  14
MV([0-9a-z] ::= "f")  :=  MV([0-9a-f] ::= "f")  :=  15
MV([0-9a-z] ::= "g")  :=  16
MV([0-9a-z] ::= "h")  :=  17
MV([0-9a-z] ::= "i")  :=  18
MV([0-9a-z] ::= "j")  :=  19
MV([0-9a-z] ::= "k")  :=  20
MV([0-9a-z] ::= "l")  :=  21
MV([0-9a-z] ::= "m")  :=  22
MV([0-9a-z] ::= "n")  :=  23
MV([0-9a-z] ::= "o")  :=  24
MV([0-9a-z] ::= "p")  :=  25
MV([0-9a-z] ::= "q")  :=  26
MV([0-9a-z] ::= "r")  :=  27
MV([0-9a-z] ::= "s")  :=  28
MV([0-9a-z] ::= "t")  :=  29
MV([0-9a-z] ::= "u")  :=  30
MV([0-9a-z] ::= "v")  :=  31
MV([0-9a-z] ::= "w")  :=  32
MV([0-9a-z] ::= "x")  :=  33
MV([0-9a-z] ::= "y")  :=  34
MV([0-9a-z] ::= "z")  :=  35



WV(Word ::= Identifier)
	:= /* TO BE DETERMINED */
WV(Word ::= Keyword)
	:= the contents of the token
