/* LR grammar */

NUMBER          ::= [../docs/spec/lexical-structure.md#numbers]
IDENTIFIER      ::= [../docs/spec/lexical-structure.md#words]
STRING          ::= [../docs/spec/lexical-structure.md#string-literals]
TEMPLATE_FULL   ::= [../docs/spec/lexical-structure.md#template-literals]
TEMPLATE_HEAD   ::= [../docs/spec/lexical-structure.md#template-literals]
TEMPLATE_MIDDLE ::= [../docs/spec/lexical-structure.md#template-literals]
TEMPLATE_TAIL   ::= [../docs/spec/lexical-structure.md#template-literals]



Goal ::= #x02 Statement* #x03



Statement ::=
	DeclarationVariable |
	StatementAssignment |
	Expression? ";"

DeclarationVariable ::= "let" "unfixed"? IDENTIFIER "=" Expression ";"

StatementAssignment ::= IDENTIFIER "=" Expression ";"



Expression ::= ExpressionAdditive

ExpressionAdditive       ::= (ExpressionAdditive       ("+" | "-"))? ExpressionMultiplicative
ExpressionMultiplicative ::= (ExpressionMultiplicative ("*" | "/"))? ExpressionExponential
ExpressionExponential    ::=  ExpressionUnarySymbol    ("^"          ExpressionExponential)?

ExpressionUnarySymbol ::= ExpressionUnit | ("+" | "-") ExpressionUnarySymbol

ExpressionUnit ::=
	IDENTIFIER         |
	PrimitiveLiteral   |
	StringTemplate     |
	"(" Expression ")"

StringTemplate ::=
	TEMPLATE_FULL |
	TEMPLATE_HEAD Expression? (TEMPLATE_MIDDLE Expression?)* TEMPLATE_TAIL

PrimitiveLiteral ::=
	NUMBER |
	STRING
