type ProductionData = [
	name: Text,
	defn: ChoiceData,
];
type ChoiceData = NonemptySequence<NonemptySequence<
	| Text
	| [term: Text]
	| [prod: Text]
>>;



ChoiceData Transform(SemanticConst expr, Text nt, Sequence<ProductionData> data) :=
	1. *Return:* [
		[expr.value],
	].
;



ChoiceData Transform(SemanticRef expr, Text nt, Sequence<ProductionData> data) :=
	1. *If* `expr.name` is in all-uppercase:
		1. *Note:* The identifier represents a non-literal terminal symbol.
		2. *Return:* [
			[[term= expr.name]],
		].
	2. *Assert:* The identifier is in title case.
	3. *Note:* The identifier represents a nonterminal symbol.
	4. *Let* `expands` be *UnwrapAffirm:* `Expand(expr)`.
	5. *Return:* a flattened mapping of `expands` indexed by `i` to `[[prod= expands[i]]]`.
;



ChoiceData Transform(SemanticItem expr, Text nt, Sequence<ProductionData> data) :=
	1. *Assert:* `expr.children.count` is at least 1.
	2. *Let* `operand` be *UnwrapAffirm:* Transform(expr.children.0, nt, data).
	3. *Let* `i` be 1.
	4. *While* `i` is less than `expr.children.count`:
		1. *If* `expr.children[i].include` is TRUE *and* `nt` contains the suffix `expr.children[i].name`:
			1. *Return:* `operand`.
		2. *If* `expr.children[i].include` is FALSE *and* `nt` does not contain the suffix `expr.children[i].name`:
			1. *Return:* `operand`.
		3. Increment `i`.
	5. *Return:* [[""]].
;



ChoiceData Transform(SemanticOp[operator: PLUS] expr, Text nt, Sequence<ProductionData> data) :=
	1. *Assert:* `expr.children.count` is 1.
	2. *Let* `operand` be *UnwrapAffirm:* Transform(expr.children.0, nt, data).
	3. *If* a memoization record does not have an entry with key `operand`:
		1. *Let* `newname` be the concatenation of `nt` with "__‹n›__List", where ‹n› is a unique number.
		2. Add a new entry to the memoization record, with key `operand` and value `newname`.
		3. *Let* `flatmap` be a flattened mapping from `operand` for each `seq` to [
				[                 ...seq],
				[[prod= newname], ...seq],
			].
		4. Push [
				name= newname,
				defn= flatmap,
			] to `prods`.
	4. *If* `newname` is not set:
		1. *Let* `newname` be the value for the entry with key `operand` in the memoization record.
	5. *Return:* [
		[[prod= newname]],
	].
;

ChoiceData Transform(SemanticOp[operator: HASH] expr, Text nt, Sequence<ProductionData> data) :=
	1. *Assert:* `expr.children.count` is 1.
	2. *Let* `operand` be *UnwrapAffirm:* Transform(expr.children.0, nt, data).
	3. *If* a memoization record does not have an entry with key `operand`:
		1. *Let* `newname` be the concatenation of `nt` with "__‹n›__List", where ‹n› is a unique number.
		2. Add a new entry to the memoization record, with key `operand` and value `newname`.
		3. *Let* `flatmap` be a flattened mapping from `operand` for each `seq` to [
				[                      ...seq],
				[[prod= newname], ",", ...seq],
			].
		4. Push [
				name= newname,
				defn= flatmap,
			] to `prods`.
	4. *If* `newname` is not set:
		1. *Let* `newname` be the value for the entry with key `operand` in the memoization record.
	5. *Return:* [
		[[prod= newname]],
	].
;

ChoiceData Transform(SemanticOp[operator: OPT] expr, Text nt, Sequence<ProductionData> data) :=
	1. *Assert:* `expr.children.count` is 1.
	2. *Let* `operand` be *UnwrapAffirm:* Transform(expr.children.0, nt, data).
	3. *Return:* [
		[""],
		...operand,
	].
;

ChoiceData Transform(SemanticOp[operator: ORDER] expr, Text nt, Sequence<ProductionData> data) :=
	1. *Assert:* `expr.children.count` is 2.
	2. *Let* `operand0` be *UnwrapAffirm:* `Transform(expr.children.0, nt, data)`.
	3. *Let* `operand1` be *UnwrapAffirm:* `Transform(expr.children.1, nt, data)`.
	4. *Return:* a flattened mapping from `operand0` indexed by `i` to
		a flattened mapping from `operand1` indexed by `j` to [
			[...operand0[i], ...operand1[j]],
		].
;

ChoiceData Transform(SemanticOp[operator: CONCAT] expr, Text nt, Sequence<ProductionData> data) :=
	1. *Assert:* `expr.children.count` is 2.
	2. *Let* `operand0` be *UnwrapAffirm:* `Transform(expr.children.0, nt, data)`.
	3. *Let* `operand1` be *UnwrapAffirm:* `Transform(expr.children.1, nt, data)`.
	4. *Return:* a flattened mapping from `operand0` indexed by `i` to
		a flattened mapping from `operand1` indexed by `j` to [
			[...operand0[i], ...operand1[j]],
			[...operand1[j], ...operand0[i]],
		].
;

ChoiceData Transform(SemanticOp[operator: ALTERN] expr, Text nt, Sequence<ProductionData> data) :=
	1. *Assert:* `expr.children.count` is 2.
	2. *Let* `operand0` be *UnwrapAffirm:* `Transform(expr.children.0, nt, data)`.
	3. *Let* `operand1` be *UnwrapAffirm:* `Transform(expr.children.1, nt, data)`.
	4. *Return:* a flattened mapping from `operand0` indexed by `i` to
		a flattened mapping from `operand1` indexed by `j` to [
			[...operand0[i]],
			[...operand1[j]],
		].
;



Sequence<ProductionData> Transform(SemanticProduction prod) :=
	1. *Assert:* `prod.children.count` is 2.
	2. *Let* `prods` be an empty sequence.
	3. *Let* `names` be *UnwrapAffirm:* `Expand(prod.children.0)`
	4. *Let* `defn` be *UnwrapAffirm:* `Transform(prod.children.1, names[i], prods)`.
	5. *Set* `prods` to a mapping from `names` indexed by `i` to [name= names[i], defn= defn].
	6. *Return:* `prods`.
;



Sequence<ProductionData> Transform(SemanticGoal goal) :=
	1. *Return:* `Transform(goal.children)`.
;



Sequence<Text> Expand(SemanticRef ref, Text nt) :=
	1. *Let* `args` be `ref.children` excluding the first item (index 0).
	2. *If* `ref.children.count` is 0 *or* `args.count` is 0:
		1. *Return:* [`ref.name`].
	3. *Let* `expands` be *UnwrapAffirm:* `Expand(ref.children.0)`.
	4. *Let* `power_suffix` be *UnwrapAffirm:* `PowerSequence<SemanticArg>(args)`.
	5. *Let* `names` be an empty sequence.
	6. *For* `i` in `expands`:
		1. *For* `j` in `power_suffix`:
			1. *Let* `suffixes` be an empty sequence.
			2. *For* `k` in `power_suffix[j]`:
				1. *If* `power_suffix[j][k].append` is TRUE:
					1. Push `power_suffix[j][k].name` to `suffixes`.
				2. *If* `power_suffix[j][k].append` is INHERIT *and* `nt` contains the suffix `power_suffix[j][k].name`:
					1. Push `power_suffix[j][k].name` to `suffixes`.
			3. *Let* `suffix` be the concatenation of each element of `suffixes`, separated by "_".
			4. *Let* `name` be the concatenation of `expands[i]` with `suffix`.
			5. *Push* `name` to `names`.
	7. *Return:* `names`.
;



Sequence<Text> Expand(SemanticNonterminal nt) :=
	1. *Let* `params` be `nt.children` excluding the first item (index 0).
	2. *If* `nt.children.count` is 0 *or* `params.count` is 0:
		1. *Return:* [`nt.name`].
	3. *Let* `expands` be *UnwrapAffirm:* `Expand(nt.children.0)`.
	4. *Let* `power_suffix` be *UnwrapAffirm:* `PowerSequence<SemanticParam>(params)`.
	5. *Let* `names` be an empty sequence.
	6. *For* `i` in `expands`:
		1. *For* `j` in `power_suffix`:
			1. *Let* `suffixes` be a mapping from `power_suffix[j]` indexed by `k` to `power_suffix[j][k].name`.
			2. *Let* `suffix` be the concatenation of each element of `suffixes`, separated by "_".
			3. *Let* `name` be the concatenation of `expands[i]` with `suffix`.
			4. *Push* `name` to `names`.
	7. *Return:* `names`.
;



Sequence<Sequence<T>> PowerSequence<T>(Sequence<T> seq) :=
	1. *Note:* A “power set” is the set of all subsets of a set.
		For example, the power set of `["a", "b", "c"]` is
		`[[], ["a"], ["b"], ["c"], ["a", "b"], ["a", "c"], ["b", "c"], ["a", "b", "c"]]`.
		A “power sequence” is the ordered analog of a power set, wherein order is preserved,
		i.e., the sequence `["a", "b"]` is not the same as the sequence `["b", "a"]`.
	2. *Return:* the power sequence of `seq`, preserving order.
;
