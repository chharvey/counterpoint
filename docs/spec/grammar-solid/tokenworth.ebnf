TokenWorth(Punctuator :::= "(")   -> RealNumber := \x00;
TokenWorth(Punctuator :::= ")")   -> RealNumber := \x01;
TokenWorth(Punctuator :::= "[")   -> RealNumber := \x02;
TokenWorth(Punctuator :::= "]")   -> RealNumber := \x03;
TokenWorth(Punctuator :::= "{")   -> RealNumber := \x04;
TokenWorth(Punctuator :::= "}")   -> RealNumber := \x05;
TokenWorth(Punctuator :::= "@")   -> RealNumber := \x06;
TokenWorth(Punctuator :::= ",")   -> RealNumber := \x07;
TokenWorth(Punctuator :::= "->")  -> RealNumber := \x08;
TokenWorth(Punctuator :::= ".")   -> RealNumber := \x09;
TokenWorth(Punctuator :::= "?.")  -> RealNumber := \x0a;
TokenWorth(Punctuator :::= "!.")  -> RealNumber := \x0b;
TokenWorth(Punctuator :::= "?")   -> RealNumber := \x0c;
TokenWorth(Punctuator :::= "!")   -> RealNumber := \x0d;
TokenWorth(Punctuator :::= "+")   -> RealNumber := \x0e;
TokenWorth(Punctuator :::= "-")   -> RealNumber := \x0f;
TokenWorth(Punctuator :::= "^")   -> RealNumber := \x10;
TokenWorth(Punctuator :::= "*")   -> RealNumber := \x11;
TokenWorth(Punctuator :::= "/")   -> RealNumber := \x12;
TokenWorth(Punctuator :::= "<")   -> RealNumber := \x13;
TokenWorth(Punctuator :::= ">")   -> RealNumber := \x14;
TokenWorth(Punctuator :::= "<=")  -> RealNumber := \x15;
TokenWorth(Punctuator :::= ">=")  -> RealNumber := \x16;
TokenWorth(Punctuator :::= "!<")  -> RealNumber := \x17;
TokenWorth(Punctuator :::= "!>")  -> RealNumber := \x18;
TokenWorth(Punctuator :::= "===") -> RealNumber := \x19;
TokenWorth(Punctuator :::= "!==") -> RealNumber := \x1a;
TokenWorth(Punctuator :::= "==")  -> RealNumber := \x1b;
TokenWorth(Punctuator :::= "!=")  -> RealNumber := \x1c;
TokenWorth(Punctuator :::= "&&")  -> RealNumber := \x1d;
TokenWorth(Punctuator :::= "!&")  -> RealNumber := \x1e;
TokenWorth(Punctuator :::= "||")  -> RealNumber := \x1f;
TokenWorth(Punctuator :::= "!|")  -> RealNumber := \x20;
TokenWorth(Punctuator :::= "&")   -> RealNumber := \x21;
TokenWorth(Punctuator :::= "|")   -> RealNumber := \x22;
TokenWorth(Punctuator :::= ";")   -> RealNumber := \x23;
TokenWorth(Punctuator :::= ":")   -> RealNumber := \x24;
TokenWorth(Punctuator :::= "?:")  -> RealNumber := \x25;
TokenWorth(Punctuator :::= "=")   -> RealNumber := \x26;



TokenWorth(Keyword :::= "void")    -> RealNumber := \x80;
TokenWorth(Keyword :::= "null")    -> RealNumber := \x81;
TokenWorth(Keyword :::= "bool")    -> RealNumber := \x82;
TokenWorth(Keyword :::= "false")   -> RealNumber := \x83;
TokenWorth(Keyword :::= "true")    -> RealNumber := \x84;
TokenWorth(Keyword :::= "int")     -> RealNumber := \x85;
TokenWorth(Keyword :::= "float")   -> RealNumber := \x86;
TokenWorth(Keyword :::= "str")     -> RealNumber := \x87;
TokenWorth(Keyword :::= "obj")     -> RealNumber := \x88;
TokenWorth(Keyword :::= "mutable") -> RealNumber := \x89;
TokenWorth(Keyword :::= "is")      -> RealNumber := \x8a;
TokenWorth(Keyword :::= "isnt")    -> RealNumber := \x8b;
TokenWorth(Keyword :::= "if")      -> RealNumber := \x8c;
TokenWorth(Keyword :::= "then")    -> RealNumber := \x8d;
TokenWorth(Keyword :::= "else")    -> RealNumber := \x8e;
TokenWorth(Keyword :::= "let")     -> RealNumber := \x8f;
TokenWorth(Keyword :::= "type")    -> RealNumber := \x90;
TokenWorth(Keyword :::= "unfixed") -> RealNumber := \x91;



TokenWorth(Identifier) -> RealNumber
	:=; // TO BE DESCRIBED



TokenWorth(Number<Radix, Separator> :::= Integer<?Radix><?Separator>) -> RealNumber
	:= TokenWorth(Integer<?Radix><?Separator>);
TokenWorth(Number<Radix, Separator> :::= Float<?Separator>) -> RealNumber
	:= TokenWorth(Float<?Separator>);

TokenWorth(Integer<Radix, Separator> :::= "+"? <Radix->DigitSequenceDec<?Separator>) -> RealNumber
	:= TokenWorth(DigitSequenceDec<?Separator>);
TokenWorth(Integer<Radix, Separator> :::= "-" <Radix->DigitSequenceDec<?Separator>) -> RealNumber
	:= -1 * TokenWorth(DigitSequenceDec<?Separator>);
TokenWorth(Integer<Radix, Separator> :::= "+"? <Radix+>IntegerDigitsRadix<?Separator>) -> RealNumber
	:= TokenWorth(IntegerDigitsRadix<?Separator>);
TokenWorth(Integer<Radix, Separator> :::= "-" <Radix+>IntegerDigitsRadix<?Separator>) -> RealNumber
	:= -1 * TokenWorth(IntegerDigitsRadix<?Separator>);

TokenWorth(IntegerDigitsRadix<Separator> :::= "\b"  DigitSequenceBin<?Separator>) -> RealNumber
	:= TokenWorth(DigitSequenceBin<?Separator>);
TokenWorth(IntegerDigitsRadix<Separator> :::= "\q"  DigitSequenceQua<?Separator>) -> RealNumber
	:= TokenWorth(DigitSequenceQua<?Separator>);
TokenWorth(IntegerDigitsRadix<Separator> :::= "\o"  DigitSequenceOct<?Separator>) -> RealNumber
	:= TokenWorth(DigitSequenceOct<?Separator>);
TokenWorth(IntegerDigitsRadix<Separator> :::= "\d"? DigitSequenceDec<?Separator>) -> RealNumber
	:= TokenWorth(DigitSequenceDec<?Separator>);
TokenWorth(IntegerDigitsRadix<Separator> :::= "\x"  DigitSequenceHex<?Separator>) -> RealNumber
	:= TokenWorth(DigitSequenceHex<?Separator>);
TokenWorth(IntegerDigitsRadix<Separator> :::= "\z"  DigitSequenceHTD<?Separator>) -> RealNumber
	:= TokenWorth(DigitSequenceHTD<?Separator>);

TokenWorth(Float<Separator> :::= SignedDigitSequenceDec<?Separator> ".") -> RealNumber
	:= TokenWorth(SignedDigitSequenceDec<?Separator>);
TokenWorth(Float<Separator> :::= SignedDigitSequenceDec<?Separator> "." DigitSequenceDec<?Separator>) -> RealNumber
	:= TokenWorth(SignedDigitSequenceDec) + TokenWorth(DigitSequenceDec<?Separator>);
TokenWorth(Float<Separator> :::= SignedDigitSequenceDec<?Separator> "." DigitSequenceDec<?Separator> ExponentPart<?Separator>) -> RealNumber
	:= (TokenWorth(SignedDigitSequenceDec<?Separator>) + TokenWorth(DigitSequenceDec<?Separator>)) * TokenWorth(ExponentPart<?Separator>);

TokenWorth(ExponentPart<Separator> :::= "e" SignedDigitSequenceDec<?Separator>) -> RealNumber
	:= 10 ^ TokenWorth(SignedDigitSequenceDec<?Separator>);

TokenWorth(SignedDigitSequenceDec<Separator> :::= "+"? DigitSequenceDec<?Separator>) -> RealNumber
	:= TokenWorth(DigitSequenceDec<?Separator>);
TokenWorth(SignedDigitSequenceDec<Separator> :::= "-"  DigitSequenceDec<?Separator>) -> RealNumber
	:= -1 * TokenWorth(DigitSequenceDec<?Separator>);

TokenWorth(DigitSequenceBin<Separator> :::= [0-1]) -> RealNumber
	:= TokenWorth([0-1]);
TokenWorth(DigitSequenceBin<Separator> :::= DigitSequenceBin<?Separator> . <Separator+>"_"? [0-1]) -> RealNumber
	:= 2 * TokenWorth(DigitSequenceBin<?Separator>) + TokenWorth([0-1]);
TokenWorth(DigitSequenceQua<Separator> :::= [0-3]) -> RealNumber
	:= TokenWorth([0-3]);
TokenWorth(DigitSequenceQua<Separator> :::= DigitSequenceQua<?Separator> . <Separator+>"_"? [0-3]) -> RealNumber
	:= 4 * TokenWorth(DigitSequenceQua<?Separator>) + TokenWorth([0-3]);
TokenWorth(DigitSequenceOct<Separator> :::= [0-7]) -> RealNumber
	:= TokenWorth([0-7]);
TokenWorth(DigitSequenceOct<Separator> :::= DigitSequenceOct<?Separator> . <Separator+>"_"? [0-7]) -> RealNumber
	:= 8 * TokenWorth(DigitSequenceOct<?Separator>) + TokenWorth([0-7]);
TokenWorth(DigitSequenceDec<Separator> :::= [0-9]) -> RealNumber
	:= TokenWorth([0-9]);
TokenWorth(DigitSequenceDec<Separator> :::= DigitSequenceDec<?Separator> . <Separator+>"_"? [0-9]) -> RealNumber
	:= 10 * TokenWorth(DigitSequenceDec<?Separator>) + TokenWorth([0-9]);
TokenWorth(DigitSequenceHex<Separator> :::= [0-9a-f]) -> RealNumber
	:= TokenWorth([0-9a-f]);
TokenWorth(DigitSequenceHex<Separator> :::= DigitSequenceHex<?Separator> . <Separator+>"_"? [0-9a-f]) -> RealNumber
	:= 16 * TokenWorth(DigitSequenceHex<?Separator>) + TokenWorth([0-9a-f]);
TokenWorth(DigitSequenceHTD<Separator> :::= [0-9a-z]) -> RealNumber
	:= TokenWorth([0-9a-z]);
TokenWorth(DigitSequenceHTD<Separator> :::= DigitSequenceHTD<?Separator> . <Separator+>"_"? [0-9a-z]) -> RealNumber
	:= 36 * TokenWorth(DigitSequenceHTD<?Separator>) + TokenWorth([0-9a-z]);

TokenWorth([0-9a-z] :::= "0") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "0") -> RealNumber  :=  TokenWorth([0-9] :::= "0") -> RealNumber  :=  TokenWorth([0-7] :::= "0") -> RealNumber  :=  TokenWorth([0-3] :::= "0") -> RealNumber  :=  TokenWorth([0-1] :::= "0") -> RealNumber  :=  \x00;
TokenWorth([0-9a-z] :::= "1") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "1") -> RealNumber  :=  TokenWorth([0-9] :::= "1") -> RealNumber  :=  TokenWorth([0-7] :::= "1") -> RealNumber  :=  TokenWorth([0-3] :::= "1") -> RealNumber  :=  TokenWorth([0-1] :::= "1") -> RealNumber  :=  \x01;
TokenWorth([0-9a-z] :::= "2") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "2") -> RealNumber  :=  TokenWorth([0-9] :::= "2") -> RealNumber  :=  TokenWorth([0-7] :::= "2") -> RealNumber  :=  TokenWorth([0-3] :::= "2") -> RealNumber  :=  \x02;
TokenWorth([0-9a-z] :::= "3") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "3") -> RealNumber  :=  TokenWorth([0-9] :::= "3") -> RealNumber  :=  TokenWorth([0-7] :::= "3") -> RealNumber  :=  TokenWorth([0-3] :::= "3") -> RealNumber  :=  \x03;
TokenWorth([0-9a-z] :::= "4") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "4") -> RealNumber  :=  TokenWorth([0-9] :::= "4") -> RealNumber  :=  TokenWorth([0-7] :::= "4") -> RealNumber  :=  \x04;
TokenWorth([0-9a-z] :::= "5") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "5") -> RealNumber  :=  TokenWorth([0-9] :::= "5") -> RealNumber  :=  TokenWorth([0-7] :::= "5") -> RealNumber  :=  \x05;
TokenWorth([0-9a-z] :::= "6") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "6") -> RealNumber  :=  TokenWorth([0-9] :::= "6") -> RealNumber  :=  TokenWorth([0-7] :::= "6") -> RealNumber  :=  \x06;
TokenWorth([0-9a-z] :::= "7") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "7") -> RealNumber  :=  TokenWorth([0-9] :::= "7") -> RealNumber  :=  TokenWorth([0-7] :::= "7") -> RealNumber  :=  \x07;
TokenWorth([0-9a-z] :::= "8") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "8") -> RealNumber  :=  TokenWorth([0-9] :::= "8") -> RealNumber  :=  \x08;
TokenWorth([0-9a-z] :::= "9") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "9") -> RealNumber  :=  TokenWorth([0-9] :::= "9") -> RealNumber  :=  \x09;
TokenWorth([0-9a-z] :::= "a") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "a") -> RealNumber  :=  \x0a;
TokenWorth([0-9a-z] :::= "b") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "b") -> RealNumber  :=  \x0b;
TokenWorth([0-9a-z] :::= "c") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "c") -> RealNumber  :=  \x0c;
TokenWorth([0-9a-z] :::= "d") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "d") -> RealNumber  :=  \x0d;
TokenWorth([0-9a-z] :::= "e") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "e") -> RealNumber  :=  \x0e;
TokenWorth([0-9a-z] :::= "f") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "f") -> RealNumber  :=  \x0f;
TokenWorth([0-9a-z] :::= "g") -> RealNumber  :=  \x010;
TokenWorth([0-9a-z] :::= "h") -> RealNumber  :=  \x011;
TokenWorth([0-9a-z] :::= "i") -> RealNumber  :=  \x012;
TokenWorth([0-9a-z] :::= "j") -> RealNumber  :=  \x013;
TokenWorth([0-9a-z] :::= "k") -> RealNumber  :=  \x014;
TokenWorth([0-9a-z] :::= "l") -> RealNumber  :=  \x015;
TokenWorth([0-9a-z] :::= "m") -> RealNumber  :=  \x016;
TokenWorth([0-9a-z] :::= "n") -> RealNumber  :=  \x017;
TokenWorth([0-9a-z] :::= "o") -> RealNumber  :=  \x018;
TokenWorth([0-9a-z] :::= "p") -> RealNumber  :=  \x019;
TokenWorth([0-9a-z] :::= "q") -> RealNumber  :=  \x01a;
TokenWorth([0-9a-z] :::= "r") -> RealNumber  :=  \x01b;
TokenWorth([0-9a-z] :::= "s") -> RealNumber  :=  \x01c;
TokenWorth([0-9a-z] :::= "t") -> RealNumber  :=  \x01d;
TokenWorth([0-9a-z] :::= "u") -> RealNumber  :=  \x01e;
TokenWorth([0-9a-z] :::= "v") -> RealNumber  :=  \x01f;
TokenWorth([0-9a-z] :::= "w") -> RealNumber  :=  \x020;
TokenWorth([0-9a-z] :::= "x") -> RealNumber  :=  \x021;
TokenWorth([0-9a-z] :::= "y") -> RealNumber  :=  \x022;
TokenWorth([0-9a-z] :::= "z") -> RealNumber  :=  \x023;



TokenWorth(String<Comment, Separator> :::= "'" "'") -> Sequence<RealNumber>
	:= [];
TokenWorth(String<Comment, Separator> :::= "'" StringChars<?Comment><?Separator> "'") -> Sequence<RealNumber>
	:= TokenWorth(StringChars<?Comment><?Separator>);
TokenWorth(String<Comment, Separator> :::= "'" StringUnfinished<?Comment> "'") -> Sequence<RealNumber>
	:= TokenWorth(StringUnfinished<?Comment>);
TokenWorth(String<Comment, Separator> :::= "'" StringChars<?Comment><?Separator> StringUnfinished<?Comment> "'") -> Sequence<RealNumber>
	:= [...TokenWorth(StringChars<?Comment><?Separator>), ...TokenWorth(StringUnfinished<?Comment>)];

	TokenWorth(StringChars<Comment, Separator> :::= StringChar<?Comment><?Separator>) -> Sequence<RealNumber>
		:= TokenWorth(StringChar<?Comment><?Separator>);
	TokenWorth(StringChars<Comment, Separator> :::= StringChar<?Comment><?Separator> StringChars<?Comment><?Separator>) -> Sequence<RealNumber>
		:= [...TokenWorth(StringChar<?Comment><?Separator>), ...TokenWorth(StringChars<?Comment><?Separator>)];

		TokenWorth(StringChar<Comment, Separator> :::= <Comment->[^'\#x03]) -> Sequence<RealNumber>
			:= UTF8Encoding(CodePoint([^'\#x03]));
		TokenWorth(StringChar<Comment, Separator> :::= <Comment+>[^'\%#x03]) -> Sequence<RealNumber>
			:= UTF8Encoding(CodePoint([^'\%#x03]));
		TokenWorth(StringChar<Comment, Separator> :::= "\" StringEscape<?Comment><?Separator>) -> Sequence<RealNumber>
			:= TokenWorth(StringEscape<?Comment><?Separator>);
		TokenWorth(StringChar<Comment, Separator> :::= "\u" [^'{#x03]) -> Sequence<RealNumber>
			:= [...UTF8Encoding(\x75), ...UTF8Encoding(CodePoint([^'{#x03]))];
		TokenWorth(StringChar<Comment, Separator> :::= <Comment+>("%" ([^'%#x0a#x03] [^'#x0a#x03]*)? #x0a)) -> Sequence<RealNumber>
			:= UTF8Encoding(\x0a);
		TokenWorth(StringChar<Comment, Separator> :::= <Comment+>("%%" ("%"? [^'%#x03])* "%%")) -> Sequence<RealNumber>
			:= [];

			TokenWorth(StringEscape<Comment, Separator> :::= "'") -> Sequence<RealNumber>
				:= UTF8Encoding(\x27); // U+0027 APOSTROPHE
			TokenWorth(StringEscape<Comment, Separator> :::= "\") -> Sequence<RealNumber>
				:= UTF8Encoding(\x5c); // U+005C REVERSE SOLIDUS
			TokenWorth(StringEscape<Comment, Separator> :::= <Comment+>"%") -> Sequence<RealNumber>
				:= UTF8Encoding(\x25); // U+0025 PERCENT SIGN
			TokenWorth(StringEscape<Comment, Separator> :::= "s") -> Sequence<RealNumber>
				:= UTF8Encoding(\x20); // U+0020 SPACE
			TokenWorth(StringEscape<Comment, Separator> :::= "t") -> Sequence<RealNumber>
				:= UTF8Encoding(\x09); // U+0009 CHARACTER TABULATION
			TokenWorth(StringEscape<Comment, Separator> :::= "n") -> Sequence<RealNumber>
				:= UTF8Encoding(\x0a); // U+000A LINE FEED (LF)
			TokenWorth(StringEscape<Comment, Separator> :::= "r") -> Sequence<RealNumber>
				:= UTF8Encoding(\x0d); // U+000D CARRIAGE RETURN (CR)
			TokenWorth(StringEscape<Comment, Separator> :::= "u{" "}") -> Sequence<RealNumber>
				:= UTF8Encoding(\x00); // U+0000 NULL
			TokenWorth(StringEscape<Comment, Separator> :::= "u{" DigitSequenceHex<?Separator> "}") -> Sequence<RealNumber>
				:= UTF8Encoding(TokenWorth(DigitSequenceHex<?Separator>));
			TokenWorth(StringEscape<Comment, Separator> :::= #x0A) -> Sequence<RealNumber>
				:= UTF8Encoding(\x20); // U+0020 SPACE
			TokenWorth(StringEscape<Comment, Separator> :::= <Comment->[^'\stnru#x0a#x03]) -> Sequence<RealNumber>
				:= UTF8Encoding(CodePoint([^'\stnru#x0a#x03]));
			TokenWorth(StringEscape<Comment, Separator> :::= <Comment+>[^'\%stnru#x0a#x03]) -> Sequence<RealNumber>
				:= UTF8Encoding(CodePoint([^'\%stnru#x0a#x03]));

	TokenWorth(StringUnfinished<Comment> :::= "\u") -> Sequence<RealNumber>
		:= UTF8Encoding(\x75); // U+0075 LATIN SMALL LETTER U
	TokenWorth(StringUnfinished<Comment> :::= <Comment+>("%" ([^'%#x0a#x03] [^'#x0a#x03]*)?)) -> Sequence<RealNumber>
		:= [];
	TokenWorth(StringUnfinished<Comment> :::= <Comment+>("%%" ("%"? [^'%#x03])*)) -> Sequence<RealNumber>
		:= [];



TokenWorth(TemplateFull :::= "'''" "'''") -> Sequence<RealNumber>
	:= [];
TokenWorth(TemplateFull :::= "'''" TemplateChars__EndDelim "'''") -> Sequence<RealNumber>
	:= TokenWorth(TemplateChars__EndDelim);

TokenWorth(TemplateHead :::= "'''" "{{") -> Sequence<RealNumber>
	:= [];
TokenWorth(TemplateHead :::= "'''" TemplateChars__EndInterp "{{") -> Sequence<RealNumber>
	:= TokenWorth(TemplateChars__EndInterp);

TokenWorth(TemplateMiddle :::= "}}" "{{") -> Sequence<RealNumber>
	:= [];
TokenWorth(TemplateMiddle :::= "}}" TemplateChars__EndInterp "{{") -> Sequence<RealNumber>
	:= TokenWorth(TemplateChars__EndInterp);

TokenWorth(TemplateTail :::= "}}" "'''") -> Sequence<RealNumber>
	:= [];
TokenWorth(TemplateTail :::= "}}" TemplateChars__EndDelim "'''") -> Sequence<RealNumber>
	:= TokenWorth(TemplateChars__EndDelim);

	TokenWorth(TemplateChars__EndDelim) -> Sequence<RealNumber>
		:= "Return a mapping of `TemplateChars__EndDelim` for each `character` to `UTF8Encoding(CodePoint(character))`.";

	TokenWorth(TemplateChars__EndInterp) -> Sequence<RealNumber>
		:= "Return a mapping of `TemplateChars__EndInterp` for each `character` to `UTF8Encoding(CodePoint(character))`.";
