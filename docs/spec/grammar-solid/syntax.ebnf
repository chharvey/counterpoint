// KEYWORD         ::= [./lexicon.ebnf#Keyword];
// IDENTIFIER      ::= [./lexicon.ebnf#Identifier];
// INTEGER         ::= [./lexicon.ebnf#Integer];
// FLOAT           ::= [./lexicon.ebnf#Float];
// STRING          ::= [./lexicon.ebnf#String];
// TEMPLATE_FULL   ::= [./lexicon.ebnf#TemplateFull];
// TEMPLATE_HEAD   ::= [./lexicon.ebnf#TemplateHead];
// TEMPLATE_MIDDLE ::= [./lexicon.ebnf#TempalteMiddle];
// TEMPLATE_TAIL   ::= [./lexicon.ebnf#TempalteTail];



Word ::=
	| KEYWORD
	| IDENTIFIER
;



PrimitiveLiteral ::=
	| "null"
	| "false"
	| "true"
	| INTEGER
	| FLOAT
	| STRING
;



TypeKeyword ::=
	| "void"
	| "bool"
	| "int"
	| "float"
	| "str"
	| "obj"
;

EntryType<Named, Optional>
	::= <Named+>(Word . <Optional->":") <Optional+>"?:" Type;

ItemsType ::=
	|  EntryType<-Named><-Optional># ","?
	| (EntryType<-Named><-Optional># ",")? EntryType<-Named><+Optional># ","?
;

PropertiesType
	::= EntryType<+Named><-Optional, +Optional># ","?;

TypeTupleLiteral  ::= "[" (","? ItemsType)?    "]";
TypeRecordLiteral ::= "["  ","? PropertiesType "]";
TypeHashLiteral   ::= "[" ":" Type             "]";
TypeMapLiteral    ::= "{" Type "->" Type       "}";
GenericArguments  ::= "<"  ","? Type# ","?     ">";

TypeUnit ::=
	| IDENTIFIER
	| PrimitiveLiteral
	| TypeKeyword
	| TypeTupleLiteral
	| TypeRecordLiteral
	| TypeHashLiteral
	| TypeMapLiteral
	| "(" Type ")"
;

PropertyAccessType ::= "." (INTEGER | Word);
GenericCall        ::= "." GenericArguments;

TypeCompound ::=
	| TypeUnit
	| TypeCompound (PropertyAccessType | GenericCall)
;

TypeUnarySymbol ::=
	| TypeCompound
	| TypeUnarySymbol ("?" | "!" | "[" INTEGER? "]" | "{" "}")
;

TypeUnaryKeyword ::=
	| TypeUnarySymbol
	| "mutable" TypeUnaryKeyword
;

TypeIntersection ::= (TypeIntersection "&")? TypeUnaryKeyword;
TypeUnion        ::= (TypeUnion        "|")? TypeIntersection;

Type ::=
	| TypeUnion
;



StringTemplate<Variable> ::=
	| TEMPLATE_FULL
	| TEMPLATE_HEAD Expression<?Variable>? (TEMPLATE_MIDDLE Expression<?Variable>?)* TEMPLATE_TAIL
;

Property <Variable> ::= Word                  "="  Expression<?Variable>;
Case                ::= Expression<+Variable> "->" Expression<+Variable>;

TupleLiteral  <Variable> ::= <Variable->"@" "[" ( ","? Expression <?Variable># ","? )? "]";
RecordLiteral <Variable> ::= <Variable->"@" "["   ","? Property   <?Variable># ","?    "]";
SetLiteral               ::=                "{" ( ","? Expression <+Variable># ","? )? "}";
MapLiteral               ::=                "{"   ","? Case#                   ","?    "}";
FunctionArguments        ::=                "(" ( ","? Expression <+Variable># ","? )? ")";

ExpressionUnit<Variable> ::=
	| <Variable+>IDENTIFIER
	| PrimitiveLiteral
	| StringTemplate<?Variable>
	| TupleLiteral  <-Variable>
	| RecordLiteral <-Variable>
	| <Variable+>TupleLiteral  <?Variable>
	| <Variable+>RecordLiteral <?Variable>
	| <Variable+>SetLiteral
	| <Variable+>MapLiteral
	| "(" Expression<?Variable> ")"
;

PropertyAccess<Variable> ::= ("." | "?." | "!.") (INTEGER | Word | "[" Expression<?Variable> "]");
PropertyAssign           ::=  "."                (INTEGER | Word | "[" Expression<+Variable> "]");
FunctionCall             ::=  "."                GenericArguments? FunctionArguments;

ExpressionCompound<Variable> ::=
	| ExpressionUnit<?Variable>
	| ExpressionCompound<?Variable> PropertyAccess<?Variable>
	| <Variable+>(ExpressionCompound<?Variable> FunctionCall)
;

Assignee ::=
	| IDENTIFIER
	| ExpressionCompound<+Variable> PropertyAssign
;

ExpressionUnarySymbol<Variable> ::=
	| ExpressionCompound<?Variable>
	| ("!" | "?" | "+" | "-") ExpressionUnarySymbol<?Variable>
;

ExpressionExponential<Variable>
	::= ExpressionUnarySymbol<?Variable> ("^" ExpressionExponential<?Variable>)?;

ExpressionMultiplicative <Variable> ::= (ExpressionMultiplicative <?Variable> ("*" | "/" ))?                                            ExpressionExponential    <?Variable>;
ExpressionAdditive       <Variable> ::= (ExpressionAdditive       <?Variable> ("+" | "-" ))?                                            ExpressionMultiplicative <?Variable>;
ExpressionComparative    <Variable> ::= (ExpressionComparative    <?Variable> ("<" | ">" | "<=" | ">=" | "!<" | "!>" | "is" | "isnt"))? ExpressionAdditive       <?Variable>;
ExpressionEquality       <Variable> ::= (ExpressionEquality       <?Variable> ("===" | "!==" | "==" | "!="))?                           ExpressionComparative    <?Variable>;
ExpressionConjunctive    <Variable> ::= (ExpressionConjunctive    <?Variable> ("&&" | "!&"))?                                           ExpressionEquality       <?Variable>;
ExpressionDisjunctive    <Variable> ::= (ExpressionDisjunctive    <?Variable> ("||" | "!|"))?                                           ExpressionConjunctive    <?Variable>;

ExpressionConditional<Variable>
	::= "if" Expression<?Variable> "then" Expression<?Variable> "else" Expression<?Variable>;

Expression<Variable> ::=
	| ExpressionDisjunctive<?Variable>
	| ExpressionConditional<?Variable>
;



DeclarationType     ::= "type"            IDENTIFIER "=" Type                          ";";
DeclarationVariable ::= "let"  "unfixed"? IDENTIFIER ":" Type "=" Expression<+Variable> ";";

Declaration ::=
	| DeclarationType
	| DeclarationVariable
;

StatementAssignment
	::= Assignee "=" Expression<+Variable> ";";

Statement ::=
	| Expression<+Variable>? ";"
	| Declaration
	| StatementAssignment
;



Goal ::= #x02 Statement* #x03;
