Type TypeValueOf(SemanticTypeConstant const) :=
	1. *Return:* `const.value`.
;



Type TypeValueOf(SemanticTypeAlias var) :=
	1. *If* the validator’s symbol table contains a SymbolStructure `symbol` whose `id` is `var.id`:
		1. *Assert:* `symbol` is an instance of `SymbolStructureType`.
		2. *Assert:* `symbol.typevalue` is a Solid Language Type.
		3. *Return:* `symbol.typevalue`.
	2. *Return:* `Never`.
;



Type TypeValueOf(SemanticTypeTuple tupletype) :=
	1. *Let* `data` be a new Sequence.
	2. *For each* `itemtype` in `tupletype`:
		1. *Assert:* `itemtype.children.count` is 1.
		2. *Let* `typedatum` be a new EntryTypeStructure [
			type:     *UnwrapAffirm:* `TypeValueOf(itemtype.children.0)`,
			optional: `itemtype.optional`,
		].
		3. Push `typedatum` to `data`.
	3. *Return:* a `Tuple` type whose items are `data`.
;



Type TypeValueOf(SemanticTypeRecord recordtype) :=
	1. *Let* `data` be a new Structure.
	2. *For each* `propertytype` in `recordtype`:
		1. *Assert:* `propertytype.children.count` is 2.
		2. *Let* `typedatum` be a new EntryTypeStructure [
			type:     *UnwrapAffirm:* `TypeValueOf(propertytype.children.1)`,
			optional: `propertytype.optional`,
		].
		3. Set the property `propertytype.children.0.id` on `data` to the value `typedatum`.
	3. *Return:* a `Record` type whose properties are `data`.
;



Type TypeValueOf(SemanticTypeList listtype) :=
	1. *Assert:* `listtype.children.count` is 1.
	2. *Let* `itemtype` be *UnwrapAffirm:* `TypeValueOf(listtype.children.0)`.
	3. *If* `listtype.count` is a RealNumber:
		1. *If* `listtype.count` is less than *0*:
			1. *Throw:* a new TypeError.
		2. *Let* `data` be a new Sequence.
		3. *Let* `i` be *0*.
		4. *While* `i` is less than `listtype.count`:
			1. Push a new EntryTypeStructure [
				type:     `itemtype`,
				optional: `false`,
			] to `data`.
			2. Increment `i`.
		5. *Return:* a `Tuple` type whose items are `data`.
	4. *Return:* a `List` type whose items’ type is `itemtype`.
;



Type TypeValueOf(SemanticTypeDict dicttype) :=
	1. *Assert:* `dicttype.children.count` is 1.
	2. *Let* `valuetype` be *UnwrapAffirm:* `TypeValueOf(dicttype.children.0)`.
	3. *Return:* a `Dict` type whose values’ type is `valuetype`.
;



Type TypeValueOf(SemanticTypeSet settype) :=
	1. *Assert:* `settype.children.count` is 1.
	2. *Let* `elementtype` be *UnwrapAffirm:* `TypeValueOf(settype.children.0)`.
	3. *Return:* a `Set` type whose elements’ type is `elementtype`.
;



Type TypeValueOf(SemanticTypeMap maptype) :=
	1. *Assert:* `maptype.children.count` is 1.
	2. *Let* `antecedenttype` be *UnwrapAffirm:* `TypeValueOf(maptype.children.0)`.
	2. *Let* `consequenttype` be *UnwrapAffirm:* `TypeValueOf(maptype.children.1)`.
	3. *Return:* a `Map` type whose antecedents’ type is `antecedenttype`
		and whose consequents’ type is `consequenttype`.
;



Type TypeValueOf(SemanticTypeAccess access) :=
	1. *Assert:* `access.children.count` is 2.
	2. *Let* `base` be `access.children.0`.
	3. *Let* `accessor` be `access.children.1`.
	4. *Let* `base_type` be *UnwrapAffirm:* `CombineTuplesOrRecords(*UnwrapAffirm:* TypeValueOf(base))`.
	5. *If* `accessor` is a SemanticIndexType:
		1. *Assert:* `accessor.children.count` is 1.
		2. *Let* `accessor_type` be *UnwrapAffirm:* `TypeValueOf(accessor.children.0)`.
		3. *Assert:* `accessor_type` is a TypeUnit.
		4. *Let* `i` be `accessor_type.value`.
		5. *Assert:* `i` is a instance of `Integer`.
		6. *If* `base_type` is a `Tuple` type *and* `i` is an index in `base_type`:
			1. *Let* `entry` be the item accessed at index `i` in `base_type`.
			2. *Return:* *UnwrapAffirm:* `UpdateAccessedStaticType(entry, NORMAL)`.
		7. *Throw:* a new TypeError04 "Index {{ i }} does not exist on type {{ base_type }}.".
	6. *Assert:* `accessor` is a SemanticKey.
	7. *Let* `id` be `accessor.id`.
	8. *If* `base_type` is a `Record` type *and* `id` is a key in `base_type`:
		1. *Let* `entry` be the item accessed at key `id` in `base_type`.
		2. *Return:* *UnwrapAffirm:* `UpdateAccessedStaticType(entry, NORMAL)`.
	9. *Throw:* a new TypeError04 "Property {{ id }} does not exist on type {{ base_type }}.".
;



Type TypeValueOf(SemanticTypeCall call) :=
	1. *Assert:* `call.children.count` is greater than or equal to 2.
	2. *Let* `base` be `call.children.0`.
	3. *If* `base` is not a SemanticTypeAlias:
		1. *Note:* Currently, the only allowed generic calls are `List.<T>`, `Dict.<T>`, `Set.<T>`, `Map.<K, V>`.
		2. *Throw:* a new TypeError.
	4. *If* `base.source` is one of "List", "Dict", or "Set":
		1. *If* `call.children.count` is 2:
			1. *Let* `genericarg` be *UnwrapAffirm:* `TypeValueOf(call.children.1)`.
			2. *If* `base.source` is "List":
				1. *Return:* a `List` type whose items’ type is `genericarg`.
			3. *If* `base.source` is "Dict":
				1. *Return:* a `Dict` type whose values’ type is `genericarg`.
			4. *If* `base.source` is "Set":
				1. *Return:* a `Set` type whose elements’ type is `genericarg`.
		2. *Throw:* a new TypeError.
	5. *Else If* `base.source` is "Map":
		1. *Let* `antecedenttype` be *UnwrapAffirm:* `TypeValueOf(call.children.1)`.
		2. *If* `call.children.count` is 2:
			1. *Let* `consequenttype` be `antecedenttype`.
		3. *Else If* `call.children.count` is 3:
			1. *Let* `consequenttype` be *UnwrapAffirm:* `TypeValueOf(call.children.2)`.
		4. *Else*:
			1. *Throw:* a new TypeError.
		5. *Return:* a `Map` type whose antecedents’ type is `antecedenttype`
			and whose consequents’ type is `consequenttype`.
	6. *Throw* a new SyntaxError.
;



Type TypeValueOf(SemanticTypeOperation[operator: ORNULL] oper) :=
	1. *Assert:* `oper.children.count` is 1.
	2. *Let* `child` be *UnwrapAffirm:* `TypeValueOf(oper.children.0)`.
	3. *Return:* `Union(child, Null)`.
;

Type TypeValueOf(SemanticTypeOperation[operator: OREXCP] oper) :=
	1. *Throw:* new TypeError "Operator not yet supported.".
;

Type TypeValueOf(SemanticTypeOperation[operator: MUTABLE] oper) :=
	1. *Assert:* `oper.children.count` is 1.
	2. *Let* `child` be *UnwrapAffirm:* `TypeValueOf(oper.children.0)`.
	3. *Let* `returned` be a mutable copy of `child`.
	4. *Return:* `returned`.
;

Type TypeValueOf(SemanticTypeOperation[operator: AND] oper) :=
	1. *Assert:* `oper.children.count` is 2.
	2. *Let* `child0` be *UnwrapAffirm:* `TypeValueOf(oper.children.0)`.
	3. *Let* `child1` be *UnwrapAffirm:* `TypeValueOf(oper.children.1)`.
	4. *Return:* `Intersection(child0, child1)`.
;

Type TypeValueOf(SemanticTypeOperation[operator: OR] oper) :=
	1. *Assert:* `oper.children.count` is 2.
	2. *Let* `child0` be *UnwrapAffirm:* `TypeValueOf(oper.children.0)`.
	3. *Let* `child1` be *UnwrapAffirm:* `TypeValueOf(oper.children.1)`.
	4. *Return:* `Union(child0, child1)`.
;
