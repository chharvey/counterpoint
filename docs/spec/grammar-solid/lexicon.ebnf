Filebound
	:::= #x02 | #x03;



Whitespace
	:::= (#x20 | #x09 | #x0a)+;



Comment :::=
	| CommentLine
	| CommentMulti
;

CommentLine
	:::= "%" ([^%#x0a#x03] [^#x0a#x03]*)? #x0a;

CommentMulti
	:::= "%%" ("%"? [^%#x03])* "%%";



Punctuator :::=
	// grouping
		| "(" | ")"
		| "[" | "]"
		| "{" | "}"
		| "," | "->"
	// compound
		| "." | "?." | "!."
	// unary
		| "!" | "?" | "+" | "-"
	// binary
		| "^" | "*" | "/"
		| "<" | ">" | "<=" | ">=" | "!<" | "!>"
		| "===" | "!==" | "==" | "!="
		| "&&" | "!&" | "||" | "!|"
		| "&" | "|"
	// statement
		| ";" | ":" | "?:" | "="
;



Keyword :::=
	// literal
		| "void"
		| "null"
		| "bool"
		| "false"
		| "true"
		| "int"
		| "float"
		| "str"
		| "obj"
	// operator
		| "mutable"
		| "is"
		| "isnt"
		| "if"
		| "then"
		| "else"
	// storage
		| "let"
		| "type"
	// modifier
		| "unfixed"
;



Identifier
	:::= ([A-Za-z_] [A-Za-z0-9_]* | "`" [^`#x03]* "`") - Keyword;



Number<Radix, Separator> :::=
	| Integer<?Radix><?Separator>
	| Float<?Separator>
;

Integer<Radix, Separator>
	:::= ("+" | "-")? <Radix->DigitSequenceDec<?Separator> . <Radix+>IntegerDigitsRadix<?Separator>;

IntegerDigitsRadix<Separator> :::=
	| "\b"  DigitSequenceBin<?Separator>
	| "\q"  DigitSequenceQua<?Separator>
	| "\o"  DigitSequenceOct<?Separator>
	| "\d"? DigitSequenceDec<?Separator>
	| "\x"  DigitSequenceHex<?Separator>
	| "\z"  DigitSequenceHTD<?Separator>
;

Float<Separator>
	:::= SignedDigitSequenceDec<?Separator> "." ( DigitSequenceDec<?Separator> ExponentPart<?Separator>? )?;

ExponentPart<Separator>
	:::= "e" SignedDigitSequenceDec<?Separator>;

SignedDigitSequenceDec<Separator>
	:::= ("+" | "-")? DigitSequenceDec<?Separator>;

DigitSequenceBin<Separator> :::= ( DigitSequenceBin<?Separator> . <Separator+>"_"? )? [0-1];
DigitSequenceQua<Separator> :::= ( DigitSequenceQua<?Separator> . <Separator+>"_"? )? [0-3];
DigitSequenceOct<Separator> :::= ( DigitSequenceOct<?Separator> . <Separator+>"_"? )? [0-7];
DigitSequenceDec<Separator> :::= ( DigitSequenceDec<?Separator> . <Separator+>"_"? )? [0-9];
DigitSequenceHex<Separator> :::= ( DigitSequenceHex<?Separator> . <Separator+>"_"? )? [0-9a-f];
DigitSequenceHTD<Separator> :::= ( DigitSequenceHTD<?Separator> . <Separator+>"_"? )? [0-9a-z];



String<Comment, Separator>
	:::= "'" StringChars<?Comment><?Separator>? StringUnfinished<?Comment>? "'";

	StringChars<Comment, Separator>
		:::= StringChar<?Comment><?Separator> StringChars<?Comment><?Separator>?;

		StringChar<Comment, Separator> :::=
			| <Comment->[^'\#x03]
			| <Comment+>[^'\%#x03]
			| "\"  StringEscape<?Comment><?Separator>
			| "\u" [^'{#x03]
			| <Comment+>("%"  ([^'%#x0a#x03] [^'#x0a#x03]*)? #x0a)
			| <Comment+>("%%" ("%"? [^'%#x03])*              "%%")
		;

			StringEscape<Comment, Separator> :::=
				| "'" | "\" | <Comment+>"%"
				| "s" | "t" | "n" | "r"
				| "u{" DigitSequenceHex<?Separator>? "}"
				| #x0a
				| <Comment->[^'\stnru#x0a#x03]
				| <Comment+>[^'\%stnru#x0a#x03]
			;

	StringUnfinished<Comment> :::=
		| "\u"
		| <Comment+>("%"  ([^'%#x0a#x03] [^'#x0a#x03]*)?)
		| <Comment+>("%%" ("%"? [^'%#x03])*)
	;



TemplateFull   :::= "'''" TemplateChars__EndDelim?  "'''";
TemplateHead   :::= "'''" TemplateChars__EndInterp? "{{" ;
TemplateMiddle :::= "}}"  TemplateChars__EndInterp? "{{" ;
TemplateTail   :::= "}}"  TemplateChars__EndDelim?  "'''";

	TemplateChars__EndDelim :::=
		// Step 1
		// | TemplateChars__EndDelim__Basic
		// | TemplateChars__EndDelim__StartDelim
		// | TemplateChars__EndDelim__StartInterp

		// Step 2
		// - TemplateChars__EndDelim__Basic
		// |                              [^'{#x03]
		// |                              [^'{#x03] TemplateChars__EndDelim
		// - TemplateChars__EndDelim__StartDelim
		// | ("'{" | "''{")* ("'" | "''") [^'{#x03]
		// | ("'{" | "''{")* ("'" | "''") [^'{#x03] TemplateChars__EndDelim
		// | ("'{" | "''{")+
		// | ("'{" | "''{")+              [^'{#x03]
		// | ("'{" | "''{")+              [^'{#x03] TemplateChars__EndDelim
		// - TemplateChars__EndDelim__StartInterp
		// | ("{'" | "{''")* "{"
		// | ("{'" | "{''")* "{"          [^'{#x03]
		// | ("{'" | "{''")* "{"          [^'{#x03] TemplateChars__EndDelim
		// | ("{'" | "{''")+              [^'{#x03]
		// | ("{'" | "{''")+              [^'{#x03] TemplateChars__EndDelim

		// Step 3
		// |                              [^'{#x03]
		// | ("'{" | "''{")* ("'" | "''") [^'{#x03]
		// | ("'{" | "''{")+              [^'{#x03]?
		// | ("{'" | "{''")* "{"          [^'{#x03]?
		// | ("{'" | "{''")+              [^'{#x03]
		// | (
		// 	|                              [^'{#x03]
		// 	| ("'{" | "''{")* ("'" | "''") [^'{#x03]
		// 	| ("'{" | "''{")+              [^'{#x03]
		// 	| ("{'" | "{''")* "{"          [^'{#x03]
		// 	| ("{'" | "{''")+              [^'{#x03]
		// ) TemplateChars__EndDelim

		// Step 4
		// | (
		// 	|                              [^'{#x03]
		// 	| ("'{" | "''{")* ("'" | "''") [^'{#x03]
		// 	| ("'{" | "''{")+              [^'{#x03]
		// 	| ("{'" | "{''")* "{"          [^'{#x03]
		// 	| ("{'" | "{''")+              [^'{#x03]
		// )* (
		// 	|                              [^'{#x03]
		// 	| ("'{" | "''{")* ("'" | "''") [^'{#x03]
		// 	| ("'{" | "''{")+              [^'{#x03]?
		// 	| ("{'" | "{''")* "{"          [^'{#x03]?
		// 	| ("{'" | "{''")+              [^'{#x03]
		// )

		// Step 5
		| TemplateChars__NoEnd* (
			|                              [^'{#x03]
			| ("'{" | "''{")* ("'" | "''") [^'{#x03]
			| ("'{" | "''{")+              [^'{#x03]?
			| ("{'" | "{''")* "{"          [^'{#x03]?
			| ("{'" | "{''")+              [^'{#x03]
		)
	;

		// TemplateChars__EndDelim__Basic
		// 	:::= [^'{#x03] TemplateChars__EndDelim?;

		// TemplateChars__EndDelim__StartDelim :::=
		// 	Step 1
		// 	| ("'"  | "''")   TemplateChars__EndDelim__Basic
		// 	| ("'{" | "''{") (TemplateChars__EndDelim__Basic | TemplateChars__EndDelim__StartDelim)?
		//
		// 	Step 2
		// 	| ("'"  | "''")  TemplateChars__EndDelim__Basic
		// 	| ("'{" | "''{")
		// 	| ("'{" | "''{") TemplateChars__EndDelim__Basic
		// 	| ("'{" | "''{") TemplateChars__EndDelim__StartDelim
		//
		// 	Step 3
		// 	| ("'{" | "''{")* ("'"  | "''") TemplateChars__EndDelim__Basic
		// 	| ("'{" | "''{")+
		// 	| ("'{" | "''{")+               TemplateChars__EndDelim__Basic
		//
		// 	Step 4
		// 	| ("'{" | "''{")* ("'" | "''") [^'{#x03] TemplateChars__EndDelim?
		// 	| ("'{" | "''{")+
		// 	| ("'{" | "''{")+              [^'{#x03] TemplateChars__EndDelim?
		// ;

		// TemplateChars__EndDelim__StartInterp :::=
		// 	Step 1
		// 	| "{"             TemplateChars__EndDelim__Basic?
		// 	| ("{'" | "{''") (TemplateChars__EndDelim__Basic | TemplateChars__EndDelim__StartInterp)
		//
		// 	Step 2
		// 	| "{"
		// 	| "{"            TemplateChars__EndDelim__Basic
		// 	| ("{'" | "{''") TemplateChars__EndDelim__Basic
		// 	| ("{'" | "{''") TemplateChars__EndDelim__StartInterp
		//
		// 	Step 3
		// 	| ("{'" | "{''")* "{"
		// 	| ("{'" | "{''")* "{" TemplateChars__EndDelim__Basic
		// 	| ("{'" | "{''")+     TemplateChars__EndDelim__Basic
		//
		// 	Step 4
		// 	| ("{'" | "{''")* "{"
		// 	| ("{'" | "{''")* "{" [^'{#x03] TemplateChars__EndDelim?
		// 	| ("{'" | "{''")+     [^'{#x03] TemplateChars__EndDelim?
		// ;

	TemplateChars__EndInterp :::=
		// Step 1
		// | TemplateChars__EndInterp__Basic
		// | TemplateChars__EndInterp__StartDelim
		// | TemplateChars__EndInterp__StartInterp

		// Step 2
		// - TemplateChars__EndInterp__Basic
		// |                              [^'{#x03]
		// |                              [^'{#x03] TemplateChars__EndInterp
		// - TemplateChars__EndInterp__StartDelim
		// | ("'{" | "''{")* ("'" | "''")
		// | ("'{" | "''{")* ("'" | "''") [^'{#x03]
		// | ("'{" | "''{")* ("'" | "''") [^'{#x03] TemplateChars__EndInterp
		// | ("'{" | "''{")+              [^'{#x03]
		// | ("'{" | "''{")+              [^'{#x03] TemplateChars__EndInterp
		// - TemplateChars__EndInterp__StartInterp
		// | ("{'" | "{''")* "{"          [^'{#x03]
		// | ("{'" | "{''")* "{"          [^'{#x03] TemplateChars__EndInterp
		// | ("{'" | "{''")+
		// | ("{'" | "{''")+              [^'{#x03]
		// | ("{'" | "{''")+              [^'{#x03] TemplateChars__EndInterp

		// Step 3
		// |                              [^'{#x03]
		// | ("'{" | "''{")* ("'" | "''") [^'{#x03]?
		// | ("'{" | "''{")+              [^'{#x03]
		// | ("{'" | "{''")* "{"          [^'{#x03]
		// | ("{'" | "{''")+              [^'{#x03]?
		// | (
		// 	|                              [^'{#x03]
		// 	| ("'{" | "''{")* ("'" | "''") [^'{#x03]
		// 	| ("'{" | "''{")+              [^'{#x03]
		// 	| ("{'" | "{''")* "{"          [^'{#x03]
		// 	| ("{'" | "{''")+              [^'{#x03]
		// ) TemplateChars__EndInterp

		// Step 4
		// | (
		// 	|                              [^'{#x03]
		// 	| ("'{" | "''{")* ("'" | "''") [^'{#x03]
		// 	| ("'{" | "''{")+              [^'{#x03]
		// 	| ("{'" | "{''")* "{"          [^'{#x03]
		// 	| ("{'" | "{''")+              [^'{#x03]
		// )* (
		// 	|                              [^'{#x03]
		// 	| ("'{" | "''{")* ("'" | "''") [^'{#x03]?
		// 	| ("'{" | "''{")+              [^'{#x03]
		// 	| ("{'" | "{''")* "{"          [^'{#x03]
		// 	| ("{'" | "{''")+              [^'{#x03]?
		// )

		// Step 5
		| TemplateChars__NoEnd* (
			|                              [^'{#x03]
			| ("'{" | "''{")* ("'" | "''") [^'{#x03]?
			| ("'{" | "''{")+              [^'{#x03]
			| ("{'" | "{''")* "{"          [^'{#x03]
			| ("{'" | "{''")+              [^'{#x03]?
		)
	;

		// TemplateChars__EndInterp__Basic
		// 	:::= [^'{#x03] TemplateChars__EndInterp?;

		// TemplateChars__EndInterp__StartDelim :::=
		// 	Step 1
		// 	| ("'"  | "''")   TemplateChars__EndInterp__Basic?
		// 	| ("'{" | "''{") (TemplateChars__EndInterp__Basic | TemplateChars__EndInterp__StartDelim)
		//
		// 	Step 2
		// 	| ("'"  | "''")
		// 	| ("'"  | "''")  TemplateChars__EndInterp__Basic
		// 	| ("'{" | "''{") TemplateChars__EndInterp__Basic
		// 	| ("'{" | "''{") TemplateChars__EndInterp__StartDelim
		//
		// 	Step 3
		// 	| ("'{" | "''{")* ("'" | "''")
		// 	| ("'{" | "''{")* ("'" | "''") TemplateChars__EndInterp__Basic
		// 	| ("'{" | "''{")+              TemplateChars__EndInterp__Basic
		//
		// 	Step 4
		// 	| ("'{" | "''{")* ("'" | "''")
		// 	| ("'{" | "''{")* ("'" | "''") [^'{#x03] TemplateChars__EndInterp?
		// 	| ("'{" | "''{")+              [^'{#x03] TemplateChars__EndInterp?
		// ;

		// TemplateChars__EndInterp__StartInterp :::=
		// 	Step 1
		// 	| "{"             TemplateChars__EndInterp__Basic
		// 	| ("{'" | "{''") (TemplateChars__EndInterp__Basic | TemplateChars__EndInterp__StartInterp)?
		//
		// 	Step 2
		// 	| "{"            TemplateChars__EndInterp__Basic
		// 	| ("{'" | "{''")
		// 	| ("{'" | "{''") TemplateChars__EndInterp__Basic
		// 	| ("{'" | "{''") TemplateChars__EndInterp__StartInterp
		//
		// 	Step 3
		// 	| ("{'" | "{''")* "{" TemplateChars__EndInterp__Basic
		// 	| ("{'" | "{''")+
		// 	| ("{'" | "{''")+     TemplateChars__EndInterp__Basic
		//
		// 	Step 4
		// 	| ("{'" | "{''")* "{" [^'{#x03] TemplateChars__EndInterp?
		// 	| ("{'" | "{''")+
		// 	| ("{'" | "{''")+     [^'{#x03] TemplateChars__EndInterp?
		// ;

	TemplateChars__NoEnd :::=
		|                              [^'{#x03]
		| ("'{" | "''{")* ("'" | "''") [^'{#x03]
		| ("'{" | "''{")+              [^'{#x03]
		| ("{'" | "{''")* "{"          [^'{#x03]
		| ("{'" | "{''")+              [^'{#x03]
	;



Goal<Comment, Radix, Separator> :::=
	| Filebound
	| Whitespace
	| <Comment+>Comment
	| Punctuator
	| Keyword
	| Identifier
	| Number<?Radix><?Separator>
	| String<?Comment><?Separator>
	| TemplateFull
	| TemplateHead
	| TemplateMiddle
	| TemplateTail
;
