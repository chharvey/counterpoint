TokenWorth(Punctuator :::= "(")   -> RealNumber := \x00;
TokenWorth(Punctuator :::= ")")   -> RealNumber := \x01;
TokenWorth(Punctuator :::= "[")   -> RealNumber := \x02;
TokenWorth(Punctuator :::= "]")   -> RealNumber := \x03;
TokenWorth(Punctuator :::= ",")   -> RealNumber := \x04;
TokenWorth(Punctuator :::= "|->") -> RealNumber := \x05;
TokenWorth(Punctuator :::= "!")   -> RealNumber := \x06;
TokenWorth(Punctuator :::= "?")   -> RealNumber := \x07;
TokenWorth(Punctuator :::= "+")   -> RealNumber := \x08;
TokenWorth(Punctuator :::= "-")   -> RealNumber := \x09;
TokenWorth(Punctuator :::= "^")   -> RealNumber := \x0a;
TokenWorth(Punctuator :::= "*")   -> RealNumber := \x0b;
TokenWorth(Punctuator :::= "/")   -> RealNumber := \x0c;
TokenWorth(Punctuator :::= "<")   -> RealNumber := \x0d;
TokenWorth(Punctuator :::= ">")   -> RealNumber := \x0e;
TokenWorth(Punctuator :::= "<=")  -> RealNumber := \x0f;
TokenWorth(Punctuator :::= ">=")  -> RealNumber := \x10;
TokenWorth(Punctuator :::= "!<")  -> RealNumber := \x11;
TokenWorth(Punctuator :::= "!>")  -> RealNumber := \x12;
TokenWorth(Punctuator :::= "==")  -> RealNumber := \x13;
TokenWorth(Punctuator :::= "!=")  -> RealNumber := \x14;
TokenWorth(Punctuator :::= "&&")  -> RealNumber := \x15;
TokenWorth(Punctuator :::= "!&")  -> RealNumber := \x16;
TokenWorth(Punctuator :::= "||")  -> RealNumber := \x17;
TokenWorth(Punctuator :::= "!|")  -> RealNumber := \x18;
TokenWorth(Punctuator :::= "&")   -> RealNumber := \x19;
TokenWorth(Punctuator :::= "|")   -> RealNumber := \x1a;
TokenWorth(Punctuator :::= ";")   -> RealNumber := \x1b;
TokenWorth(Punctuator :::= ":")   -> RealNumber := \x1c;
TokenWorth(Punctuator :::= "=")   -> RealNumber := \x1d;



TokenWorth(Keyword :::= "null")    -> RealNumber := \x80;
TokenWorth(Keyword :::= "bool")    -> RealNumber := \x81;
TokenWorth(Keyword :::= "false")   -> RealNumber := \x82;
TokenWorth(Keyword :::= "true")    -> RealNumber := \x83;
TokenWorth(Keyword :::= "int")     -> RealNumber := \x84;
TokenWorth(Keyword :::= "float")   -> RealNumber := \x85;
TokenWorth(Keyword :::= "obj")     -> RealNumber := \x86;
TokenWorth(Keyword :::= "is")      -> RealNumber := \x87;
TokenWorth(Keyword :::= "isnt")    -> RealNumber := \x88;
TokenWorth(Keyword :::= "if")      -> RealNumber := \x89;
TokenWorth(Keyword :::= "then")    -> RealNumber := \x8a;
TokenWorth(Keyword :::= "else")    -> RealNumber := \x8b;
TokenWorth(Keyword :::= "let")     -> RealNumber := \x8c;
TokenWorth(Keyword :::= "type")    -> RealNumber := \x8d;
TokenWorth(Keyword :::= "unfixed") -> RealNumber := \x8e;



TokenWorth(Identifier) -> RealNumber
	:=; // TO BE DESCRIBED



TokenWorth(Number :::= Integer) -> RealNumber
	:= TokenWorth(Integer);
TokenWorth(Number :::= Float) -> RealNumber
	:= TokenWorth(Float);

TokenWorth(Integer :::= "+"? IntegerDigits) -> RealNumber
	:= TokenWorth(IntegerDigits);
TokenWorth(Integer :::= "-"  IntegerDigits) -> RealNumber
	:= -1 * TokenWorth(IntegerDigits);

TokenWorth(IntegerDigits :::= "\b"  DigitSequenceBin) -> RealNumber
	:= TokenWorth(DigitSequenceBin);
TokenWorth(IntegerDigits :::= "\q"  DigitSequenceQua) -> RealNumber
	:= TokenWorth(DigitSequenceQua);
TokenWorth(IntegerDigits :::= "\o"  DigitSequenceOct) -> RealNumber
	:= TokenWorth(DigitSequenceOct);
TokenWorth(IntegerDigits :::= "\d"? DigitSequenceDec) -> RealNumber
	:= TokenWorth(DigitSequenceDec);
TokenWorth(IntegerDigits :::= "\x"  DigitSequenceHex) -> RealNumber
	:= TokenWorth(DigitSequenceHex);
TokenWorth(IntegerDigits :::= "\z"  DigitSequenceHTD) -> RealNumber
	:= TokenWorth(DigitSequenceHTD);

TokenWorth(Float :::= SignedDigitSequenceDec ".") -> RealNumber
	:= TokenWorth(SignedDigitSequenceDec);
TokenWorth(Float :::= SignedDigitSequenceDec "." FractionalPart) -> RealNumber
	:= TokenWorth(SignedDigitSequenceDec) + TokenWorth(FractionalPart);
TokenWorth(Float :::= SignedDigitSequenceDec "." FractionalPart ExponentPart) -> RealNumber
	:= (TokenWorth(SignedDigitSequenceDec) + TokenWorth(FractionalPart)) * TokenWorth(ExponentPart);

TokenWorth(FractionalPart :::= DigitSequenceDec) -> RealNumber
	:= TokenWorth(DigitSequenceDec) * 10 ^ (-1 * DigitCount(DigitSequenceDec));

TokenWorth(ExponentPart :::= "e" SignedDigitSequenceDec) -> RealNumber
	:= 10 ^ TokenWorth(SignedDigitSequenceDec);

TokenWorth(SignedDigitSequenceDec :::= "+"? DigitSequenceDec) -> RealNumber
	:= TokenWorth(DigitSequenceDec);
TokenWorth(SignedDigitSequenceDec :::= "-"  DigitSequenceDec) -> RealNumber
	:= -1 * TokenWorth(DigitSequenceDec);

TokenWorth(DigitSequenceBin :::= [0-1]) -> RealNumber
	:= TokenWorth([0-1]);
TokenWorth(DigitSequenceBin :::= DigitSequenceBin "_"? [0-1]) -> RealNumber
	:= 2 * TokenWorth(DigitSequenceBin) + TokenWorth([0-1]);
TokenWorth(DigitSequenceQua :::= [0-3]) -> RealNumber
	:= TokenWorth([0-3]);
TokenWorth(DigitSequenceQua :::= DigitSequenceQua "_"? [0-3]) -> RealNumber
	:= 4 * TokenWorth(DigitSequenceQua) + TokenWorth([0-3]);
TokenWorth(DigitSequenceOct :::= [0-7]) -> RealNumber
	:= TokenWorth([0-7]);
TokenWorth(DigitSequenceOct :::= DigitSequenceOct "_"? [0-7]) -> RealNumber
	:= 8 * TokenWorth(DigitSequenceOct) + TokenWorth([0-7]);
TokenWorth(DigitSequenceDec :::= [0-9]) -> RealNumber
	:= TokenWorth([0-9]);
TokenWorth(DigitSequenceDec :::= DigitSequenceDec "_"? [0-9]) -> RealNumber
	:= 10 * TokenWorth(DigitSequenceDec) + TokenWorth([0-9]);
TokenWorth(DigitSequenceHex :::= [0-9a-f]) -> RealNumber
	:= TokenWorth([0-9a-f]);
TokenWorth(DigitSequenceHex :::= DigitSequenceHex "_"? [0-9a-f]) -> RealNumber
	:= 16 * TokenWorth(DigitSequenceHex) + TokenWorth([0-9a-f]);
TokenWorth(DigitSequenceHTD :::= [0-9a-z]) -> RealNumber
	:= TokenWorth([0-9a-z]);
TokenWorth(DigitSequenceHTD :::= DigitSequenceHTD "_"? [0-9a-z]) -> RealNumber
	:= 36 * TokenWorth(DigitSequenceHTD) + TokenWorth([0-9a-z]);

TokenWorth([0-9a-z] :::= "0") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "0") -> RealNumber  :=  TokenWorth([0-9] :::= "0") -> RealNumber  :=  TokenWorth([0-7] :::= "0") -> RealNumber  :=  TokenWorth([0-3] :::= "0") -> RealNumber  :=  TokenWorth([0-1] :::= "0") -> RealNumber  :=  \x00;
TokenWorth([0-9a-z] :::= "1") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "1") -> RealNumber  :=  TokenWorth([0-9] :::= "1") -> RealNumber  :=  TokenWorth([0-7] :::= "1") -> RealNumber  :=  TokenWorth([0-3] :::= "1") -> RealNumber  :=  TokenWorth([0-1] :::= "1") -> RealNumber  :=  \x01;
TokenWorth([0-9a-z] :::= "2") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "2") -> RealNumber  :=  TokenWorth([0-9] :::= "2") -> RealNumber  :=  TokenWorth([0-7] :::= "2") -> RealNumber  :=  TokenWorth([0-3] :::= "2") -> RealNumber  :=  \x02;
TokenWorth([0-9a-z] :::= "3") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "3") -> RealNumber  :=  TokenWorth([0-9] :::= "3") -> RealNumber  :=  TokenWorth([0-7] :::= "3") -> RealNumber  :=  TokenWorth([0-3] :::= "3") -> RealNumber  :=  \x03;
TokenWorth([0-9a-z] :::= "4") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "4") -> RealNumber  :=  TokenWorth([0-9] :::= "4") -> RealNumber  :=  TokenWorth([0-7] :::= "4") -> RealNumber  :=  \x04;
TokenWorth([0-9a-z] :::= "5") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "5") -> RealNumber  :=  TokenWorth([0-9] :::= "5") -> RealNumber  :=  TokenWorth([0-7] :::= "5") -> RealNumber  :=  \x05;
TokenWorth([0-9a-z] :::= "6") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "6") -> RealNumber  :=  TokenWorth([0-9] :::= "6") -> RealNumber  :=  TokenWorth([0-7] :::= "6") -> RealNumber  :=  \x06;
TokenWorth([0-9a-z] :::= "7") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "7") -> RealNumber  :=  TokenWorth([0-9] :::= "7") -> RealNumber  :=  TokenWorth([0-7] :::= "7") -> RealNumber  :=  \x07;
TokenWorth([0-9a-z] :::= "8") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "8") -> RealNumber  :=  TokenWorth([0-9] :::= "8") -> RealNumber  :=  \x08;
TokenWorth([0-9a-z] :::= "9") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "9") -> RealNumber  :=  TokenWorth([0-9] :::= "9") -> RealNumber  :=  \x09;
TokenWorth([0-9a-z] :::= "a") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "a") -> RealNumber  :=  \x0a;
TokenWorth([0-9a-z] :::= "b") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "b") -> RealNumber  :=  \x0b;
TokenWorth([0-9a-z] :::= "c") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "c") -> RealNumber  :=  \x0c;
TokenWorth([0-9a-z] :::= "d") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "d") -> RealNumber  :=  \x0d;
TokenWorth([0-9a-z] :::= "e") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "e") -> RealNumber  :=  \x0e;
TokenWorth([0-9a-z] :::= "f") -> RealNumber  :=  TokenWorth([0-9a-f] :::= "f") -> RealNumber  :=  \x0f;
TokenWorth([0-9a-z] :::= "g") -> RealNumber  :=  \x010;
TokenWorth([0-9a-z] :::= "h") -> RealNumber  :=  \x011;
TokenWorth([0-9a-z] :::= "i") -> RealNumber  :=  \x012;
TokenWorth([0-9a-z] :::= "j") -> RealNumber  :=  \x013;
TokenWorth([0-9a-z] :::= "k") -> RealNumber  :=  \x014;
TokenWorth([0-9a-z] :::= "l") -> RealNumber  :=  \x015;
TokenWorth([0-9a-z] :::= "m") -> RealNumber  :=  \x016;
TokenWorth([0-9a-z] :::= "n") -> RealNumber  :=  \x017;
TokenWorth([0-9a-z] :::= "o") -> RealNumber  :=  \x018;
TokenWorth([0-9a-z] :::= "p") -> RealNumber  :=  \x019;
TokenWorth([0-9a-z] :::= "q") -> RealNumber  :=  \x01a;
TokenWorth([0-9a-z] :::= "r") -> RealNumber  :=  \x01b;
TokenWorth([0-9a-z] :::= "s") -> RealNumber  :=  \x01c;
TokenWorth([0-9a-z] :::= "t") -> RealNumber  :=  \x01d;
TokenWorth([0-9a-z] :::= "u") -> RealNumber  :=  \x01e;
TokenWorth([0-9a-z] :::= "v") -> RealNumber  :=  \x01f;
TokenWorth([0-9a-z] :::= "w") -> RealNumber  :=  \x020;
TokenWorth([0-9a-z] :::= "x") -> RealNumber  :=  \x021;
TokenWorth([0-9a-z] :::= "y") -> RealNumber  :=  \x022;
TokenWorth([0-9a-z] :::= "z") -> RealNumber  :=  \x023;



TokenWorth(String :::= "'" "'") -> Sequence<RealNumber>
	:= [];
TokenWorth(String :::= "'" StringChars "'") -> Sequence<RealNumber>
	:= TokenWorth(StringChars);
TokenWorth(StringChars :::= [^'\#x03]) -> Sequence<RealNumber>
	:= UTF16Encoding(CodePoint([^'\#x03]));
TokenWorth(StringChars :::= [^'\#x03] StringChars) -> Sequence<RealNumber>
	:= [...UTF16Encoding(CodePoint([^'\#x03])), ...TokenWorth(StringChars)];
TokenWorth(StringChars :::= "\" StringEscape) -> Sequence<RealNumber>
	:= TokenWorth(StringEscape);
TokenWorth(StringChars :::= "\" StringEscape StringChars) -> Sequence<RealNumber>
	:= [...TokenWorth(StringEscape), ...TokenWorth(StringChars)];
TokenWorth(StringChars :::= "\u") -> Sequence<RealNumber>
	:= [\x75]; // U+0075 LATIN SMALL LETTER U
TokenWorth(StringChars :::= "\u" [^'{#x03']) -> Sequence<RealNumber>
	:= [\x75, ...UTF16Encoding(CodePoint([^'{#x03']))];
TokenWorth(StringChars :::= "\u" [^'{#x03'] StringChars) -> Sequence<RealNumber>
	:= [\x75, ...UTF16Encoding(CodePoint([^'{#x03'])), ...TokenWorth(StringChars)];
TokenWorth(StringEscape :::= "'") -> Sequence<RealNumber> := [\x27]; // U+0027 APOSTROPHE
TokenWorth(StringEscape :::= "\") -> Sequence<RealNumber> := [\x5c]; // U+005C REVERSE SOLIDUS
TokenWorth(StringEscape :::= "s") -> Sequence<RealNumber> := [\x20]; // U+0020 SPACE
TokenWorth(StringEscape :::= "t") -> Sequence<RealNumber> := [\x09]; // U+0009 CHARACTER TABULATION
TokenWorth(StringEscape :::= "n") -> Sequence<RealNumber> := [\x0a]; // U+000A LINE FEED (LF)
TokenWorth(StringEscape :::= "r") -> Sequence<RealNumber> := [\x0d]; // U+000D CARRIAGE RETURN (CR)
TokenWorth(StringEscape :::= "u{" "}") -> Sequence<RealNumber>
	:= [\x00]; // U+0000 NULL
TokenWorth(StringEscape :::= "u{" DigitSequenceHex "}") -> Sequence<RealNumber>
	:= UTF16Encoding(TokenWorth(DigitSequenceHex));
TokenWorth(StringEscape :::= #x0a) -> Sequence<RealNumber>
	:= [\x20]; // U+0020 SPACE
TokenWorth(StringEscape :::= [^'\stnru#x0a#x03]) -> Sequence<RealNumber>
	:= UTF16Encoding(CodePoint([^'\stnru#x0a#x03]));



TokenWorth(TemplateFull :::= "'''" "'''") -> Sequence<RealNumber>
	:= [];
TokenWorth(TemplateFull :::= "'''" TemplateChars__EndDelim "'''") -> Sequence<RealNumber>
	:= TokenWorth(TemplateChars__EndDelim);

TokenWorth(TemplateHead :::= "'''" "{{") -> Sequence<RealNumber>
	:= [];
TokenWorth(TemplateHead :::= "'''" TemplateChars__EndInterp "{{") -> Sequence<RealNumber>
	:= TokenWorth(TemplateChars__EndInterp);

TokenWorth(TemplateMiddle :::= "}}" "{{") -> Sequence<RealNumber>
	:= [];
TokenWorth(TemplateMiddle :::= "}}" TemplateChars__EndInterp "{{") -> Sequence<RealNumber>
	:= TokenWorth(TemplateChars__EndInterp);

TokenWorth(TemplateTail :::= "}}" "'''") -> Sequence<RealNumber>
	:= [];
TokenWorth(TemplateTail :::= "}}" TemplateChars__EndDelim "'''") -> Sequence<RealNumber>
	:= TokenWorth(TemplateChars__EndDelim);

TokenWorth(TemplateChars__EndDelim :::= [^'{#x03]) -> Sequence<RealNumber>
	:= [...UTF16Encoding(CodePoint([^'{#x03]))];
TokenWorth(TemplateChars__EndDelim :::= [^'{#x03] TemplateChars__EndDelim) -> Sequence<RealNumber>
	:= [...UTF16Encoding(CodePoint([^'{#x03])), ...TokenWorth(TemplateChars__EndDelim)];
TokenWorth(TemplateChars__EndDelim :::= TemplateChars__EndDelim__StartDelim) -> Sequence<RealNumber>
	:= TokenWorth(TemplateChars__EndDelim__StartDelim);
TokenWorth(TemplateChars__EndDelim :::= TemplateChars__EndDelim__StartInterp) -> Sequence<RealNumber>
	:= TokenWorth(TemplateChars__EndDelim__StartInterp);

TokenWorth(TemplateChars__EndDelim__StartDelim :::= "'" [^'{#x03]) -> Sequence<RealNumber>
	:= [\x27, ...UTF16Encoding(CodePoint([^'{#x03]))];
TokenWorth(TemplateChars__EndDelim__StartDelim :::= "'" [^'{#x03] TemplateChars__EndDelim) -> Sequence<RealNumber>
	:= [\x27, ...UTF16Encoding(CodePoint([^'{#x03])), ...TokenWorth(TemplateChars__EndDelim)];
TokenWorth(TemplateChars__EndDelim__StartDelim :::= "''" [^'{#x03]) -> Sequence<RealNumber>
	:= [\x27, \x27, ...UTF16Encoding(CodePoint([^'{#x03]))];
TokenWorth(TemplateChars__EndDelim__StartDelim :::= "''" [^'{#x03] TemplateChars__EndDelim) -> Sequence<RealNumber>
	:= [\x27, \x27, ...UTF16Encoding(CodePoint([^'{#x03])), ...TokenWorth(TemplateChars__EndInterp)];
TokenWorth(TemplateChars__EndDelim__StartDelim :::= "'{") -> Sequence<RealNumber>
	:= [\x27, \x7b];
TokenWorth(TemplateChars__EndDelim__StartDelim :::= "'{" [^'{#x03]) -> Sequence<RealNumber>
	:= [\x27, \x7b, ...UTF16Encoding(CodePoint([^'{#x03]))];
TokenWorth(TemplateChars__EndDelim__StartDelim :::= "'{" [^'{#x03] TemplateChars__EndDelim) -> Sequence<RealNumber>
	:= [\x27, \x7b, ...UTF16Encoding(CodePoint([^'{#x03])), ...TokenWorth(TemplateChars__EndDelim)];
TokenWorth(TemplateChars__EndDelim__StartDelim :::= "'{" TemplateChars__EndDelim__StartDelim) -> Sequence<RealNumber>
	:= [\x27, \x7b, ...TokenWorth(TemplateChars__EndDelim__StartDelim)];
TokenWorth(TemplateChars__EndDelim__StartDelim :::= "''{") -> Sequence<RealNumber>
	:= [\x27, \x27, \x7b];
TokenWorth(TemplateChars__EndDelim__StartDelim :::= "''{" [^'{#x03]) -> Sequence<RealNumber>
	:= [\x27, \x27, \x7b, ...UTF16Encoding(CodePoint([^'{#x03]))];
TokenWorth(TemplateChars__EndDelim__StartDelim :::= "''{" [^'{#x03] TemplateChars__EndDelim) -> Sequence<RealNumber>
	:= [\x27, \x27, \x7b, ...UTF16Encoding(CodePoint([^'{#x03])), ...TokenWorth(TemplateChars__EndDelim)];
TokenWorth(TemplateChars__EndDelim__StartDelim :::= "''{" TemplateChars__EndDelim__StartDelim) -> Sequence<RealNumber>
	:= [\x27, \x27, \x7b, ...TokenWorth(TemplateChars__EndDelim__StartDelim)];

TokenWorth(TemplateChars__EndDelim__StartInterp :::= "{") -> Sequence<RealNumber>
	:= [\x7b]; // U+007B LEFT CURLY BRACKET
TokenWorth(TemplateChars__EndDelim__StartInterp :::= "{" [^'{#x03]) -> Sequence<RealNumber>
	:= [\x7b, ...UTF16Encoding(CodePoint([^'{#x03]))];
TokenWorth(TemplateChars__EndDelim__StartInterp :::= "{" [^'{#x03] TemplateChars__EndDelim) -> Sequence<RealNumber>
	:= [\x7b, ...UTF16Encoding(CodePoint([^'{#x03])), ...TokenWorth(TemplateChars__EndDelim)];
TokenWorth(TemplateChars__EndDelim__StartInterp :::= "{'" [^'{#x03]) -> Sequence<RealNumber>
	:= [\x7b, \x27, ...UTF16Encoding(CodePoint([^'{#x03]))];
TokenWorth(TemplateChars__EndDelim__StartInterp :::= "{'" [^'{#x03] TemplateChars__EndDelim) -> Sequence<RealNumber>
	:= [\x7b, \x27, ...UTF16Encoding(CodePoint([^'{#x03])), ...TokenWorth(TemplateChars__EndDelim)];
TokenWorth(TemplateChars__EndDelim__StartInterp :::= "{'" TemplateChars__EndDelim__StartInterp) -> Sequence<RealNumber>
	:= [\x7b, \x27, ...TokenWorth(TemplateChars__EndDelim__StartInterp)];
TokenWorth(TemplateChars__EndDelim__StartInterp :::= "{''" [^'{#x03]) -> Sequence<RealNumber>
	:= [\x7b, \x27, \x27, ...UTF16Encoding(CodePoint([^'{#x03]))];
TokenWorth(TemplateChars__EndDelim__StartInterp :::= "{''" [^'{#x03] TemplateChars__EndDelim) -> Sequence<RealNumber>
	:= [\x7b, \x27, \x27, ...UTF16Encoding(CodePoint([^'{#x03])), ...TokenWorth(TemplateChars__EndDelim)];
TokenWorth(TemplateChars__EndDelim__StartInterp :::= "{''" TemplateChars__EndDelim__StartInterp) -> Sequence<RealNumber>
	:= [\x7b, \x27, \x27, ...TokenWorth(TemplateChars__EndDelim__StartInterp)];

TokenWorth(TemplateChars__EndInterp :::= [^'{#x03]) -> Sequence<RealNumber>
	:= [...UTF16Encoding(CodePoint([^'{#x03]))];
TokenWorth(TemplateChars__EndInterp :::= [^'{#x03] TemplateChars__EndInterp) -> Sequence<RealNumber>
	:= [...UTF16Encoding(CodePoint([^'{#x03])), ...TokenWorth(TemplateChars__EndInterp)];
TokenWorth(TemplateChars__EndInterp :::= TemplateChars__EndInterp__StartDelim) -> Sequence<RealNumber>
	:= TokenWorth(TemplateChars__EndInterp__StartDelim);
TokenWorth(TemplateChars__EndInterp :::= TemplateChars__EndInterp__StartInterp) -> Sequence<RealNumber>
	:= TokenWorth(TemplateChars__EndInterp__StartInterp);

TokenWorth(TemplateChars__EndInterp__StartDelim :::= "'") -> Sequence<RealNumber>
	:= [\x27]; // U+0027 APOSTROPHE
TokenWorth(TemplateChars__EndInterp__StartDelim :::= "'" [^'{#x03]) -> Sequence<RealNumber>
	:= [\x27, ...UTF16Encoding(CodePoint([^'{#x03]))];
TokenWorth(TemplateChars__EndInterp__StartDelim :::= "'" [^'{#x03] TemplateChars__EndInterp) -> Sequence<RealNumber>
	:= [\x27, ...UTF16Encoding(CodePoint([^'{#x03])), ...TokenWorth(TemplateChars__EndInterp)];
TokenWorth(TemplateChars__EndInterp__StartDelim :::= "''") -> Sequence<RealNumber>
	:= [\x27, \x27];
TokenWorth(TemplateChars__EndInterp__StartDelim :::= "''" [^'{#x03]) -> Sequence<RealNumber>
	:= [\x27, \x27, ...UTF16Encoding(CodePoint([^'{#x03]))];
TokenWorth(TemplateChars__EndInterp__StartDelim :::= "''" [^'{#x03] TemplateChars__EndInterp) -> Sequence<RealNumber>
	:= [\x27, \x27, ...UTF16Encoding(CodePoint([^'{#x03])), ...TokenWorth(TemplateChars__EndInterp)];
TokenWorth(TemplateChars__EndInterp__StartDelim :::= "'{" [^'{#x03]) -> Sequence<RealNumber>
	:= [\x27, \x7b, ...UTF16Encoding(CodePoint([^'{#x03]))];
TokenWorth(TemplateChars__EndInterp__StartDelim :::= "'{" [^'{#x03] TemplateChars__EndInterp) -> Sequence<RealNumber>
	:= [\x27, \x7b, ...UTF16Encoding(CodePoint([^'{#x03])), ...TokenWorth(TemplateChars__EndInterp)];
TokenWorth(TemplateChars__EndInterp__StartDelim :::= "'{" TemplateChars__EndInterp__StartDelim) -> Sequence<RealNumber>
	:= [\x27, \x7b, ...TokenWorth(TemplateChars__EndInterp__StartDelim)];
TokenWorth(TemplateChars__EndInterp__StartDelim :::= "''{" [^'{#x03]) -> Sequence<RealNumber>
	:= [\x27, \x27, \x7b, ...UTF16Encoding(CodePoint([^'{#x03]))];
TokenWorth(TemplateChars__EndInterp__StartDelim :::= "''{" [^'{#x03] TemplateChars__EndInterp) -> Sequence<RealNumber>
	:= [\x27, \x27, \x7b, ...UTF16Encoding(CodePoint([^'{#x03])), ...TokenWorth(TemplateChars__EndInterp)];
TokenWorth(TemplateChars__EndInterp__StartDelim :::= "''{" TemplateChars__EndInterp__StartDelim) -> Sequence<RealNumber>
	:= [\x27, \x27, \x7b, ...TokenWorth(TemplateChars__EndInterp__StartDelim)];

TokenWorth(TemplateChars__EndInterp__StartInterp :::= "{" [^'{#x03]) -> Sequence<RealNumber>
	:= [\x7b, ...UTF16Encoding(CodePoint([^'{#x03]))];
TokenWorth(TemplateChars__EndInterp__StartInterp :::= "{" [^'{#x03] TemplateChars__EndInterp) -> Sequence<RealNumber>
	:= [\x7b, ...UTF16Encoding(CodePoint([^'{#x03])), ...TokenWorth(TemplateChars__EndInterp)];
TokenWorth(TemplateChars__EndInterp__StartInterp :::= "{'") -> Sequence<RealNumber>
	:= [\x7b, \x27];
TokenWorth(TemplateChars__EndInterp__StartInterp :::= "{'" [^'{#x03]) -> Sequence<RealNumber>
	:= [\x7b, \x27, ...UTF16Encoding(CodePoint([^'{#x03]))];
TokenWorth(TemplateChars__EndInterp__StartInterp :::= "{'" [^'{#x03] TemplateChars__EndInterp) -> Sequence<RealNumber>
	:= [\x7b, \x27, ...UTF16Encoding(CodePoint([^'{#x03])), ...TokenWorth(TemplateChars__EndInterp)];
TokenWorth(TemplateChars__EndInterp__StartInterp :::= "{'" TemplateChars__EndInterp__StartInterp) -> Sequence<RealNumber>
	:= [\x7b, \x27, ...TokenWorth(TemplateChars__EndInterp__StartInterp)];
TokenWorth(TemplateChars__EndInterp__StartInterp :::= "{''") -> Sequence<RealNumber>
	:= [\x7b, \x27, \x27];
TokenWorth(TemplateChars__EndInterp__StartInterp :::= "{''" [^'{#x03]) -> Sequence<RealNumber>
	:= [\x7b, \x27, \x27, ...UTF16Encoding(CodePoint([^'{#x03]))];
TokenWorth(TemplateChars__EndInterp__StartInterp :::= "{''" [^'{#x03] TemplateChars__EndInterp) -> Sequence<RealNumber>
	:= [\x7b, \x27, \x27, ...UTF16Encoding(CodePoint([^'{#x03])), ...TokenWorth(TemplateChars__EndInterp)];
TokenWorth(TemplateChars__EndInterp__StartInterp :::= "{''" TemplateChars__EndInterp__StartInterp) -> Sequence<RealNumber>
	:= [\x7b, \x27, \x27, ...TokenWorth(TemplateChars__EndInterp__StartInterp)];
