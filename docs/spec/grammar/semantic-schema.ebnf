SemanticKey[id: RealNumber]
	::= ();



SemanticPropertyType
	::= SemanticKey SemanticType;



SemanticProperty
	::= SemanticKey SemanticExpression;

SemanticCase
	::= SemanticExpression SemanticExpression;



SemanticType =:=
	| SemanticTypeConstant
	| SemanticTypeAlias
	| SemanticTypeEmptyCollection
	| SemanticTypeList
	| SemanticTypeRecord
	| SemanticTypeOperation
;



SemanticTypeConstant[value: Type]
	::= ();

SemanticTypeAlias[id: RealNumber]
	::= ();

SemanticTypeEmptyCollection ::= ();
SemanticTypeList            ::= SemanticType+;
SemanticTypeRecord          ::= SemanticPropertyType+;

SemanticTypeOperation[operator: ORNULL]
	::= SemanticType;
SemanticTypeOperation[operator: AND | OR]
	::= SemanticType SemanticType;



SemanticExpression =:=
	| SemanticConstant
	| SemanticVariable
	| SemanticTemplate
	| SemanticEmptyCollection
	| SemanticList
	| SemanticRecord
	| SemanticMapping
	| SemanticOperation
;



SemanticConstant[value: Null | Boolean | Number | String]
	::= ();

SemanticVariable[id: RealNumber]
	::= ();

SemanticTemplate
	::= (SemanticConstant SemanticExpression?)* SemanticConstant;

SemanticTemplatePartial
	::= (SemanticConstant SemanticExpression?)+;

SemanticEmptyCollection ::= ();
SemanticList            ::= SemanticExpression+;
SemanticRecord          ::= SemanticProperty+;
SemanticMapping         ::= SemanticCase+;

SemanticOperation[operator: NOT | EMP]
	::= SemanticExpression;
SemanticOperation[operator: NEG]
	::= SemanticExpression[type: Number];
SemanticOperation[operator: EXP | MUL | DIV | ADD | LT | LE | GT | GE | IS]
	::= SemanticExpression[type: Number] SemanticExpression[type: Number];
SemanticOperation[operator: ID | EQ]
	::= SemanticExpression[type: Object] SemanticExpression[type: Object];
SemanticOperation[operator: AND | OR]
	::= SemanticExpression SemanticExpression;
SemanticOperation[operator: COND]
	::= SemanticExpression[type: Boolean] SemanticExpression SemanticExpression;



SemanticStatement =:=
	| SemanticStatementExpression
	| SemanticDeclaration
	| SemanticAssignment
;



SemanticStatementExpression
	::= SemanticExpression?;



SemanticDeclaration =:=
	| SemanticDeclarationType
	| SemanticDeclarationVariable
;

SemanticDeclarationType
	::= SemanticTypeAlias SemanticType;

SemanticDeclarationVariable[unfixed: Boolean]
	::= SemanticVariable SemanticType SemanticExpression;



SemanticAssignment
	::= SemanticVariable SemanticExpression;



SemanticGoal
	::= SemanticStatement*;
