Type TypeOf(SemanticConstant constant) :=
	1. *If* `constant.value` is `null`:
		1. *Return:* `Null`.
	2. *If* `constant.value` is `false` or `true`:
		1. *Return:* `Boolean`.
	3. *If* `constant.value` is a `Integer`:
		1. *Return:* `Integer`.
	4. *If* `constant.value` is a `Float`:
		1. *Return:* `Float`.
	4. Else:
		1. *Assert:* `constant.value` is a `Sequence<RealNumber>`.
		2. *Return:* `String`.



Type TypeOf(StringTemplate template) :=
	1. *Return:* `String`.



Type TypeOf(SemanticIdentifier id) :=
	// TO BE DETERMINED



Type TypeOf(SemanticOperation[operator: NOT | EMP] expr) :=
	1. *Return:* `Boolean`.

Type! TypeOf(SemanticOperation[operator: NEG] expr) :=
	1. *Assert:* `expr.children.count` is 1.
	2. *Let* `t0` be *Unwrap:* `TypeOf(expr.children.0)`.
	3. *If* `IsNumericType(t0)`:
		1. *Return:* `t0`.
	4. *Throw:* TypeError "Invalid operation.".

Type! TypeOf(SemanticOperation[operator: EXP | MUL | DIV | ADD] expr) :=
	1. *Assert:* `expr.children.count` is 2.
	2. *Let* `t0` be *Unwrap:* `TypeOf(expr.children.0)`.
	3. *Let* `t1` be *Unwrap:* `TypeOf(expr.children.1)`.
	4. *If* `IsNumericType(t0)` *and* `IsNumericType(t1)`:
		1. *If* `t0` is `Float` *or* `t1` is `Float`:
			1. *Return:* `Float`.
		2. *Else*:
			1. *Return:* `Integer`.
	5. *Throw:* TypeError "Invalid operation.".

Type! TypeOf(SemanticOperation[operator: LT | GT | LE | GE] expr) :=
	1. *Assert:* `expr.children.count` is 2.
	2. *Let* `t0` be *Unwrap:* `TypeOf(expr.children.0)`.
	3. *Let* `t1` be *Unwrap:* `TypeOf(expr.children.1)`.
	4. *If* `IsNumericType(t0)` *and* `IsNumericType(t1)`:
		1. *Return:* `Boolean`.
	5. *Throw:* TypeError "Invalid operation.".

Type! TypeOf(SemanticOperation[operator: IS | EQ] expr) :=
	// 1. *Assert:* `expr.children.count` is 2.
	// 2. *Let* `t0` be *Unwrap:* `TypeOf(expr.children.0)`.
	// 3. *Let* `t1` be *Unwrap:* `TypeOf(expr.children.1)`.
	// 4. *If* `IsNumericType(t0)` *and* `IsNumericType(t1)`:
	// 	1. *If* `operator` is `IS`:
	// 		1. *If* `t0` is `Integer` *and* `t1` is `Float`:
	// 			1. *Return:* `ToType(false)`.
	// 		2. *If* `t0` is `Float` *and* `t1` is `Integer`:
	// 			1. *Return:* `ToType(false)`.
	// 	2. *Return:* `Boolean`.
	// 5. *If* `t0` and `t1` overlap:
	// 	1. *Return:* `Boolean`.
	// 6. *Return:* `ToType(false)`.
	7. *Return:* `Boolean`.

Type! TypeOf(SemanticOperation[operator: AND] expr) :=
	1. *Assert:* `expr.children.count` is 2.
	2. *Let* `t0` be *Unwrap:* `TypeOf(expr.children.0)`.
	3. *If* `t0` is `Null`:
		1. *Return:* `t0`.
	// 4. *If* `t0` is `ToType(false)`:
	// 	1. *Return:* `t0`.
	5. *Let* `t1` be *Unwrap:* `TypeOf(expr.children.1)`.
	// 6. *If* `t0` is a type union containing `Null`, `ToType(false)`, or `Boolean`:
	// 	1. *Note:* The left-hand operand is either “falsy” or “truthy”;
	// 		if “falsy”, then it will be produced;
	// 		if “truthy”, then the right-hand operand will be produced.
	// 	2. *Return:* `TypeUnion(FalsifyType(t0), t1)`.
	// 7. *Note:* The left-hand operand is definitely “truthy”, thus
	// 	the right-hand operand will definitely be produced.
	// 8. *Return:* `t1`.
	9. *Return:* `TypeUnion(t0, t1)`.

Type! TypeOf(SemanticOperation[operator: OR] expr) :=
	1. *Assert:* `expr.children.count` is 2.
	2. *Let* `t0` be *Unwrap:* `TypeOf(expr.children.0)`.
	3. *Let* `t1` be *Unwrap:* `TypeOf(expr.children.1)`.
	4. *If* `t0` is `Null`:
		1. *Return:* `t1`.
	// 5. *If* `t0` is `ToType(false)`:
	// 	1. *Return:* `t1`.
	// 6. *If* `t0` is a type union containing `Null`, `ToType(false)`, or `Boolean`:
	// 	1. *Note:* The left-hand operand is either “falsy” or “truthy”;
	// 		if “falsy”, then the right-hand operand will be produced;
	// 		if “truthy”, then it will be produced.
	// 	2. *Return:* `TypeUnion(TruthifyType(t0), t1)`.
	// 7. *Note:* The left-hand operand is definitely “truthy”, thus
	// 	the left-hand operand will definitely be produced.
	// 8. *Return:* `t0`.
	9. *Return:* `TypeUnion(t0, t1)`.

Type! TypeOf(SemanticOperation[operator: COND] expr) :=
	1. *Assert:* `expr.children.count` is 3.
	2. *Let* `t0` be *Unwrap:* `TypeOf(expr.children.0)`.
	3. *Let* `t1` be *Unwrap:* `TypeOf(expr.children.1)`.
	4. *Let* `t2` be *Unwrap:* `TypeOf(expr.children.2)`.
	5. *If* `t0` is `Boolean`:
		1. *Return:* `TypeUnion(t1, t2)`.
	6. *Throw:* TypeError "Invalid operation.".



Type FalsifyType(Type t) :=
	1. *If* `t` is `Null`:
		1. *Return:* `Null`.
	2. *If* `t` is `Boolean`:
		1. *Return:* `ToType(false)`.
	3. *If* `t` is a type union of `Null` and another type `s`:
		1. *Return:* `TypeUnion(Null, FalsifyType(s))`.
	4. *If* `t` is a type union of `Boolean` and another type `s`:
		1. *Return:* `TypeUnion(ToType(false), FalsifyType(s))`.
	5. *Return:* `None`.



Type TruthifyType(Type t) :=
	1. *If* `t` is `Null`:
		1. *Return:* `Never`.
	2. *If* `t` is `Boolean`:
		1. *Return:* `ToType(true)`.
	3. *If* `t` is a type union of `Null` and another type `s`:
		1. *Return:* `TruthifyType(s)`.
	4. *If* `t` is a type union of `Boolean` and another type `s`:
		1. *Return:* `TypeUnion(ToType(true), TruthifyType(s))`.
	5. *Return:* `t`.



Boolean IsNumericType(Type t) :=
	1. *If* `t` is `Integer` *or* `t` is `Float`:
		1. *Return*: `true`.
	2. *Return*: `false`.
