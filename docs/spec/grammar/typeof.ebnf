Type! TypeOf(SemanticExpression expr) :=
	1. *Let* `t` be *Unrwap:* `TypeOfUnfolded(expr)`.
	2. *Let* `assess` be `ValueOf(expr)`.
	3. *If* `assess` is an abrupt completion:
		1. *Return:* `t`.
	4. *Assert:* `assess.value` exists.
	5. *Return:* `ToType(assess.value)`.
;



Type TypeOfUnfolded(SemanticConstant const) :=
	1. *Let* `assess` be *UnwrapAffirm:* `ValueOf(const)`.
	2. *Note:* `assess` is `const.value`.
	3. *Return:* `ToType(assess)`.
;



Type TypeOfUnfolded(SemanticVariable var) :=
	1. *If* the validator’s symbol table contains a SymbolStructure `symbol` whose `id` is `var.id`:
		1. *If* `symbol` is an instance of `SymbolStructureVar`:
			1. *Return:* `symbol.type`.
	2. *Return:* `Never`.
;



Type TypeOfUnfolded(StringTemplate template) :=
	1. *Return:* `String`.
;



Type! TypeOfUnfolded(SemanticTuple tuple) :=
	1. *Let* `types` be a mapping of `tuple` for each `it` to *Unwrap:* `TypeOf(it)`.
	2. *Return:* a new Tuple type containing the items in the sequence `types`.
;



Type! TypeOfUnfolded(SemanticRecord record) :=
	1. *Let* `types` be a new Structure.
	2. *For each* `property` in `record`:
		1. *Set* `types` to a new Structure [
			...types,
			`property.children.0` = *Unwrap:* `TypeOf(property.children.1)`,
		].
	3. *Return:* a new Record type containing the properties in the structure `types`.
;



Type! TypeOfUnfolded(SemanticSet set) :=
	1. *Let* `types` be a mapping of `set` for each `el` to *Unwrap:* `TypeOf(el)`.
	2. *Let* `t` be `Union(...types)`.
	3. *Return:* a new Set type whose types are `t`.
;



Type! TypeOfUnfolded(SemanticMap map) :=
	1. *Let* `ant_types` be a mapping of `map` for each `case` to *Unwrap:* `TypeOf(case.children.0)`.
	2. *Let* `con_types` be a mapping of `map` for each `case` to *Unwrap:* `TypeOf(case.children.1)`.
	3. *Let* `k` be `Union(...ant_types)`.
	4. *Let* `v` be `Union(...con_types)`.
	5. *Return:* a new Map type whose antecedent types are `k` and whose consequent types are `v`.
;



Type! TypeOfUnfolded(SemanticAccess access) :=
	1. *Assert:* `access.children.count` is 2.
	2. *Let* `base` be `access.children.0`.
	3. *Let* `accessor` be `access.children.1`.
	4. *Let* `base_type` be *Unwrap:* `CombineTuplesOrRecords(TypeOf(base))`.
	5. *If* `access.kind` is `OPTIONAL`:
		1. *If* *UnwrapAffirm:* `Subtype(base_type, Null)`:
			1. *Return:* `base_type`.
		2. *If* *UnwrapAffirm:* `Subtype(Null, base_type)`:
			1. *Set* `is_nullish` to `true`.
			2. *Set* `base_type` to `Difference(base_type, Null)`.
	6. *Let* `returned` be `none`.
	7. *If* `accessor` is a SemanticIndex:
		1. *Assert:* `accessor.children.count` is 1.
		2. *Let* `accessor_type` be *Unwrap:* `TypeOf(accessor.children.0)`.
		3. *Assert:* `accessor_type` is a TypeConstant.
		4. *Let* `i` be `accessor_type.value`.
		5. *Assert:* `i` is a instance of `Integer`.
		6. *If* *UnwrapAffirm:* `Subtype(base_type, Tuple)` *and* `i` is an index in `base_type`:
			1. *Let* `entry` be the item accessed at index `i` in `base_type`.
			2. *Set* `returned` to *UnwrapAffirm:* `UpdateAccessedStaticType(entry, access)`.
		7. *Else If* *UnwrapAffirm:* `Subtype(base_type, List)`:
			1. *Let* `type` be the union of all item types in `base_type`.
			2. *Set* `returned` to *UnwrapAffirm:* `UpdateAccessedDynamicType(type, access)`.
		8. *Else:*
			1. *Throw:* a new TypeError04 "Index {{ i }} does not exist on type {{ base_type }}.".
	8. *If* `accessor` is a SemanticKey:
		1. *Let* `id` be `accessor.id`.
		2. *If* *UnwrapAffirm:* `Subtype(base_type, Record)` *and* `id` is a key in `base_type`:
			1. *Let* `entry` be the item accessed at key `id` in `base_type`.
			2. *Set* `returned` to *UnwrapAffirm:* `UpdateAccessedStaticType(entry, access)`.
		3. *Else If* *UnwrapAffirm:* `Subtype(base_type, Hash)`:
			1. *Let* `type` be the union of all value types in `base_type`.
			2. *Set* `returned` to *UnwrapAffirm:* `UpdateAccessedDynamicType(type, access)`.
		4. *Else:*
			1. *Throw:* a new TypeError04 "Property {{ id }} does not exist on type {{ base_type }}.".
	9. *Assert:* `accessor` is a SemanticExpression.
	10. *Let* `accessor_type` be *Unwrap:* `TypeOf(accessor)`.
	11. *If* *UnwrapAffirm:* `Subtype(base_type, Tuple)`:
		1. *If* `accessor_type` is a TypeConstant:
			1. *Let* `i` be `accessor_type.value`.
			2. *If* `i` is a instance of `Integer`:
				1. *If* `i` is an index in `base_type`:
					1. *Let* `entry` be the item accessed at index `i` in `base_type`.
					2. *Set* `returned` to *UnwrapAffirm:* `UpdateAccessedStaticType(entry, access)`.
				2. *Else:*
					1. *Throw:* a new TypeError04 "Index {{ i }} does not exist on type {{ base_type }}.".
		2. *Else If* *UnwrapAffirm:* `Subtype(accessor_type, Integer)`:
			1. *Let* `t` be the union of all item types in `base_type`.
			2. *Set* `returned` to *UnwrapAffirm:* `UpdateAccessedDynamicType(t, access)`.
		3. *Else:*
			1. *Throw:* a new TypeError02 "Type {{ accessor_type }} is not a subtype of type {{ Integer }}.".
	12. *Else If* *UnwrapAffirm:* `Subtype(base_type, List)`:
		1. *Let* `t` be the union of all item types in `base_type`.
		2. *If* *UnwrapAffirm:* `Subtype(accessor_type, Integer)`:
			1. *Set* `returned` to *UnwrapAffirm:* `UpdateAccessedDynamicType(t, access)`.
		2. *Else:*
			1. *Throw:* a new TypeError02 "Type {{ accessor_type }} is not a subtype of type {{ Integer }}.".
	13. *Else If* *UnwrapAffirm:* `Subtype(base_type, Set)`:
		1. *Let* `t` be the type of the elements in `base_type`.
		2. *If* *UnwrapAffirm:* `Subtype(accessor_type, t)`:
			1. *Set* `returned` to *UnwrapAffirm:* `UpdateAccessedDynamicType(t, access)`.
		3. *Else:*
			1. *Throw:* a new TypeError02 "Type {{ accessor_type }} is not a subtype of type {{ t }}.".
	14. *Else If* *UnwrapAffirm:* `Subtype(base_type, Map)`:
		1. *Let* `k` be the type of the antecedents in `base_type`.
		2. *Let* `v` be the type of the consequents in `base_type`.
		3. *If* *UnwrapAffirm:* `Subtype(accessor_type, k)`:
			1. *Set* `returned` to *UnwrapAffirm:* `UpdateAccessedDynamicType(v, access)`.
		4. *Else:*
			1. *Throw:* a new TypeError02 "Type {{ accessor_type }} is not a subtype of type {{ k }}.".
	15. *If* `returned` is not `none`:
		1. *If* `is_nullish` is `true`:
			1. *Return:* `Union(returned, Null)`.
		2. *Return*: `returned`.
	16. *Throw:* a new TypeError01.
;



Type! TypeOfUnfolded(SemanticCall call) :=
	1. *Assert:* `call.children.count` is greater than or equal to 1.
	2. *Let* `base` be `call.children.0`.
	3. *If* `base` is not a SemanticVariable:
		1. *Note:* Currently, the only allowed generics are `List.<T>(arg)`, `Hash.<T>(arg)`, `Set.<T>(arg)`, `Map.<K, V>(arg)`.
		2. *Throw:* a new TypeError05.
	4. *If* `base.source` is one of "List", "Hash", or "Set":
		1. *If* `call.children.count` is 2 or 3:
			1. *If* `call.children.1` is a SemanticType:
				1. *Let* `genericarg` be *UnwrapAffirm:* `TypeValueOf(call.children.1)`.
				2. *If* `base.source` is "List":
					1. *Let* `returntype` be a subtype of `List` whose items’ type is `genericarg`.
				3. *Else If* `base.source` is "Hash":
					1. *Let* `returntype` be a subtype of `Hash` whose values’ type is `genericarg`.
				4. *Else If* `base.source` is "Set":
					1. *Let* `returntype` be a subtype of `Set` whose elements’ type is `genericarg`.
				5. *If* `call.children.count` is 3:
					1. *If* `call.children.2` is a SemanticExpression:
						1. *Let* `argtype` be *Unwrap:* `TypeOf(call.children.2)`.
						2. *If* `base.source` is "List":
							1. *If* `argtype` is not a subtype of `returntype`:
								1. *Throw:* a new TypeError03.
						3. *Else If* `base.source` is "Hash":
							1. *If* `argtype` is not a subtype of `returntype`:
								1. *Throw:* a new TypeError03.
						4. *Else If* `base.source` is "Set":
							1. *Let* `listtype` be a subtype of `List` whose items’ type is `genericarg`.
							2. *If* `argtype` is not a subtype of `listtype`:
								1. *Throw:* a new TypeError03.
					2. *Else*:
						1. *Throw:* a new TypeError06.
				6. *Return:* `returntype`.
		2. *Throw:* a new TypeError06.
	5. *Else If* `base.source` is "Map":
		1. *If* `call.children.count` is 2 or 3 or 4:
			1. *If* `call.children.1` is a SemanticType:
				1. *Let* `antecedenttype` be *UnwrapAffirm:* `TypeValueOf(call.children.1)`.
				2. *If* `call.children.count` is 2:
					1. *Note:* The call looks like "Map.<K>()".
					2. *Let* `consequenttype` be `antecedenttype`.
				3. *Else If* `call.children.count` is 3:
					1. *If* `call.children.2` is a SemanticType:
						1. *Note:* The call looks like "Map.<K, V>()".
						2. *Let* `consequenttype` be *UnwrapAffirm:* `TypeValueOf(call.children.2)`.
					2. *Else:*
						1. *Assert:* `call.children.2` is a SemanticExpression.
						2. *Note:* The call looks like "Map.<K>(arg)".
						3. *Let* `consequenttype` be `antecedenttype`.
						4. *Let* `argtype` be *Unwrap:* `TypeOf(call.children.2)`.
				4. *Else:*
					1. *Assert:* `call.children.count` is 4.
					2. *If* `call.children.2` is a SemanticType *and* `call.children.3` is a SemanticExpression:
						1. *Note:* The call looks like "Map.<K, V>(arg)".
						2. *Let* `consequenttype` be *UnwrapAffirm:* `TypeValueOf(call.children.2)`.
						3. *Let* `argtype` be *Unwrap:* `TypeOf(call.children.3)`.
					3. *Else:*
						1. *Throw:* a new TypeError06.
				5. *Let:* `keyvaluetype` be a subtype of `Tuple` whose items are [`antecedenttype`, `consequenttype`].
				6. *Let*: `paramtype` be a subtype of `List` whose items’ type is `keyvaluetype`.
				7. *If*: `argtype` is not a subtype of `paramtype`:
						1. *Throw:* a new TypeError03.
				8. *Return:* a subtype of `Map` whose antecedents’ type is `antecedenttype`
					and whose consequents’ type is `consequenttype`.
		2. *Throw:* a new TypeError06.
	6. *Throw* a new SyntaxError.
;



Type! TypeOfUnfolded(SemanticOperation[operator: NOT] expr) :=
	1. *Assert:* `expr.children.count` is 1.
	2. *Let* `operand` be *Unwrap:* `TypeOf(expr.children.0)`.
	3. *Let* `falsetype` be *UnwrapAffirm:* `ToType(false)`.
	4. *Let `falsytypes` be *UnwrapAffirm:* `Union(Void, Null, falsetype)`.
	5. *If* *UnwrapAffirm:* `Subtype(operand, falsytypes)`:
		1. *Return:* `ToType(true)`.
	6. *If* *UnwrapAffirm:* `Subtype(Void, operand)` *or* *UnwrapAffirm:* `Subtype(Null, operand)` *or* *UnwrapAffirm:* `Subtype(falsetype, operand)`:
		1. *Return:* `Boolean`.
	7. *Return:* `falsetype`.
;

Type! TypeOfUnfolded(SemanticOperation[operator: EMP] expr) :=
	1. *Assert:* `expr.children.count` is 1.
	2. *Perform:* *Unwrap:* `TypeOf(expr.children.0)`.
	3. *Return:* `Boolean`.
;

Type! TypeOfUnfolded(SemanticOperation[operator: NEG] expr) :=
	1. *Assert:* `expr.children.count` is 1.
	2. *Let* `t0` be *Unwrap:* `TypeOf(expr.children.0)`.
	3. *If* `t0` is a subtype of `Number`:
		1. *Return:* `t0`.
	4. *Throw:* a new TypeError01.
;

Type! TypeOfUnfolded(SemanticOperation[operator: EXP | MUL | DIV | ADD] expr) :=
	1. *Assert:* `expr.children.count` is 2.
	2. *Let* `t0` be *Unwrap:* `TypeOf(expr.children.0)`.
	3. *Let* `t1` be *Unwrap:* `TypeOf(expr.children.1)`.
	4. *If* `t0` is a subtype of `Number` *and* `t1` is a subtype of `Number`:
		1. *If* `t0` is a subtype of `Float` *or* `t1` is a subtype of `Float`:
			1. *Return:* `Float`.
		2. *Else*:
			1. *Return:* `Integer`.
	5. *Throw:* a new TypeError01.
;

Type! TypeOfUnfolded(SemanticOperation[operator: LT | GT | LE | GE] expr) :=
	1. *Assert:* `expr.children.count` is 2.
	2. *Let* `t0` be *Unwrap:* `TypeOf(expr.children.0)`.
	3. *Let* `t1` be *Unwrap:* `TypeOf(expr.children.1)`.
	4. *If* `t0` is a subtype of `Number` *and* `t1` is a subtype of `Number`:
		1. *Return:* `Boolean`.
	5. *Throw:* a new TypeError01.
;

Type! TypeOfUnfolded(SemanticOperation[operator: IS] expr) :=
	1. *Throw:* new TypeError "Operator not yet supported.".
;

Type! TypeOfUnfolded(SemanticOperation[operator: ID | EQ] expr) :=
	1. *Assert:* `expr.children.count` is 2.
	2. *Let* `t0` be *Unwrap:* `TypeOf(expr.children.0)`.
	3. *Let* `t1` be *Unwrap:* `TypeOf(expr.children.1)`.
	4. *If* `t0` is a subtype of `Number` *and* `t1` is a subtype of `Number`:
		1. *If* `t0` is a subtype of `Integer` *or* `t1` is a subtype of `Integer`:
			1. *If* `t0` is a subtype of `Float` *or* `t1` is a subtype of `Float`:
				1. *If* `operator` is `IS`:
					1. *Return:* `ToType(false)`.
		2. *Return:* `Boolean`.
	5. *If* `t0` and `t1` are disjoint:
		1. *Return:* `ToType(false)`.
	6. *Return:* `Boolean`.
;

Type! TypeOfUnfolded(SemanticOperation[operator: AND] expr) :=
	1. *Assert:* `expr.children.count` is 2.
	2. *Let* `t0` be *Unwrap:* `TypeOf(expr.children.0)`.
	3. *Let* `t1` be *Unwrap:* `TypeOf(expr.children.1)`.
	4. *Let* `falsetype` be *UnwrapAffirm:* `ToType(false)`.
	5. *Let `falsytypes` be *UnwrapAffirm:* `Union(Void, Null, falsetype)`.
	6. *If* *UnwrapAffirm:* `Subtype(t0, falsytypes)`:
		1. *Return:* `t0`.
	7. *Return:* `Union(Intersection(t0, falsytypes), t1)`.
;

Type! TypeOfUnfolded(SemanticOperation[operator: OR] expr) :=
	1. *Assert:* `expr.children.count` is 2.
	2. *Let* `t0` be *Unwrap:* `TypeOf(expr.children.0)`.
	3. *Let* `t1` be *Unwrap:* `TypeOf(expr.children.1)`.
	4. *Let* `falsetype` be *UnwrapAffirm:* `ToType(false)`.
	5. *Let `falsytypes` be *UnwrapAffirm:* `Union(Void, Null, falsetype)`.
	6. *If* *UnwrapAffirm:* `Subtype(t0, falsytypes)`:
		1. *Return:* `t1`.
	7. *If* *UnwrapAffirm:* `Subtype(Void, t0)` *or* *UnwrapAffirm:* `Subtype(Null, t0)` *or* *UnwrapAffirm:* `Subtype(falsetype, t0)`:
		1. *Return:* `Union(Difference(t0, falsytypes), t1)`.
	8. *Return:* `t0`.
;

Type! TypeOfUnfolded(SemanticOperation[operator: COND] expr) :=
	1. *Assert:* `expr.children.count` is 3.
	2. *Let* `t0` be *Unwrap:* `TypeOf(expr.children.0)`.
	3. *Let* `t1` be *Unwrap:* `TypeOf(expr.children.1)`.
	4. *Let* `t2` be *Unwrap:* `TypeOf(expr.children.2)`.
	5. *If* `t0` is a subtype of `Boolean`:
		1. *If* `t0` is `ToType(false)`:
			1. *Return:* `t2`.
		2. *If* `t0` is `ToType(true)`:
			1. *Return:* `t1`.
		3. *Return:* `Union(t1, t2)`.
	6. *Throw:* a new TypeError01.
;



Type ToType(Or<Null, Boolean, Number> v) :=
	1. *Return:* a new Type containing only the value `v`.
;
