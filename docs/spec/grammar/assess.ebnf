Type Assess(SemanticTypeConstant const) :=
	1. *Return:* `const.value`.
;



Type Assess(SemanticTypeAlias var) :=
	1. *If* the validator’s symbol table contains a SymbolStructure `symbol` whose `id` is `var.id`:
		1. *Assert:* `symbol` is of type `SymbolStructureType`.
		2. *Assert:* `symbol.defn` is of type `SemanticType`.
		3. *Return:* `Assess(symbol.defn)`.
	2. *Return:* `Unknown`.
;



Type Assess(SemanticTypeOperation[operator: ORNULL] oper) :=
	1. *Assert:* `oper.children.count` is 1.
	2. *Let* `child` be *UnwrapAffirm:* `Assess(oper.children.0)`.
	3. *Return:* `Union(child, Null)`.
;

Type Assess(SemanticTypeOperation[operator: AND] oper) :=
	1. *Assert:* `oper.children.count` is 2.
	2. *Let* `child0` be *UnwrapAffirm:* `Assess(oper.children.0)`.
	3. *Let* `child1` be *UnwrapAffirm:* `Assess(oper.children.1)`.
	4. *Return:* `Intersection(child0, child1)`.
;

Type Assess(SemanticTypeOperation[operator: OR] oper) :=
	1. *Assert:* `oper.children.count` is 2.
	2. *Let* `child0` be *UnwrapAffirm:* `Assess(oper.children.0)`.
	3. *Let* `child1` be *UnwrapAffirm:* `Assess(oper.children.1)`.
	4. *Return:* `Union(child0, child1)`.
;



Or<Null, Boolean, Number, Sequence<RealNumber>> Assess(SemanticConstant const) :=
	1. *Return:* `const.value`.
;



Void! Assess(SemanticVariable var) :=
	1. *If* the validator’s symbol table contains a SymbolStructure `symbol` whose `id` is `var.id`:
		1. *Assert:* `symbol` is of type `SymbolStructureVar`.
		2. *If* `symbol.unfixed` is `false`:
			1. *Assert:* `symbol.defn` is of type `SemanticExpression`.
			2. *Return:* `Assess(symbol.defn)`.
	2. *Throw:* `void`.
;



Void Assess(SemanticTemplate tpl) :=
	// TO BE DETERMINED
;



Boolean! Assess(SemanticOperation[operator: NOT] expr) :=
	1. *Assert:* `expr.children.count` is 1.
	2. *Let* `operand` be *Unwrap:* `Assess(expr.children.0)`.
	3. *Assert*: `operand` is not `void`.
	4. *Let* `is_truthy` be *UnwrapAffirm:* `ToBoolean(operand)`.
	5. *If* `is_truthy` is `true`:
		1. *Return:* `false`.
	6. *Return:* `true`.
;

Boolean! Assess(SemanticOperation[operator: EMP] expr) :=
	1. *Assert:* `expr.children.count` is 1.
	2. *Let* `operand` be *Unwrap:* `Assess(expr.children.0)`.
	3. *Assert*: `operand` is not `void`.
	4. *Let* `is_truthy` be *UnwrapAffirm:* `ToBoolean(operand)`.
	5. *If* `is_truthy` is `false`:
		1. *Return:* `true`.
	6. *If* `operand` is of type `Integer` *and* `operand` is `0`:
		1. *Return:* `true`.
	7. *If* `operand` is of type `Float` *and* `operand` is `0.0` or `-0.0`:
		1. *Return:* `true`.
	8. *Return:* `false`.
;

Number! Assess(SemanticOperation[operator: NEG] expr) :=
	1. *Assert:* `expr.children.count` is 1.
	2. *Let* `operand` be *Unwrap:* `Assess(expr.children.0)`.
	3. *Assert:* `operand` is of type `Number`.
	4. *Let* `negation` be the additive inverse, `-operand`,
		obtained by negating `operand`.
	5. *Return:* `negation`.
;

Number! Assess(SemanticOperation[operator: EXP | MUL | DIV | ADD] expr) :=
	1. *Assert:* `expr.children.count` is 2.
	2. *Let* `operand0` be *Unwrap:* `Assess(expr.children.0)`.
	3. *Let* `operand1` be *Unwrap:* `Assess(expr.children.1)`.
	4. *Assert*: Both `operand0` and `operand1` are of type `Number`.
	5. *If* both `operand0` and `operand1` are of type `Integer`:
		1. *Return:* `Integer(*UnwrapAffirm:* PerformBinaryArithmetic(expr.operator, operand0, operand1))`.
	6. *Return:* `Float(*UnwrapAffirm:* PerformBinaryArithmetic(expr.operator, Float(operand0), Float(operand1)))`.
;

Boolean! Assess(SemanticOperation[operator: LT | GT | LE | GE] expr) :=
	1. *Assert:* `expr.children.count` is 2.
	2. *Let* `operand0` be *Unwrap:* `Assess(expr.children.0)`.
	3. *Let* `operand1` be *Unwrap:* `Assess(expr.children.1)`.
	4. *Assert*: Both `operand0` and `operand1` are of type `Number`.
	5. *If* both `operand0` and `operand1` are of type `Integer`:
		1. *Return:* `PerformBinaryCompare(expr.operator, operand0, operand1)`.
	6. *Return:* `PerformBinaryCompare(expr.operator, Float(float0), Float(float1))`.
;

Boolean! Assess(SemanticOperation[operator: ID] expr) :=
	1. *Assert:* `expr.children.count` is 2.
	2. *Let* `operand0` be *Unwrap:* `Assess(expr.children.0)`.
	3. *Let* `operand1` be *Unwrap:* `Assess(expr.children.1)`.
	4. *Assert*: Neither `operand0` nor `operand1` is `void`.
	5. *Return:* `Identical(operand0, operand1)`.
;

Boolean! Assess(SemanticOperation[operator: EQ] expr) :=
	1. *Assert:* `expr.children.count` is 2.
	2. *Let* `operand0` be *Unwrap:* `Assess(expr.children.0)`.
	3. *Let* `operand1` be *Unwrap:* `Assess(expr.children.1)`.
	4. *Assert*: Neither `operand0` nor `operand1` is `void`.
	5. *Return:* `Equal(operand0, operand1)`.
;

Object! Assess(SemanticOperation[operator: AND] expr) :=
	1. *Assert:* `expr.children.count` is 2.
	2. *Let* `operand0` be *Unwrap:* `Assess(expr.children.0)`.
	3. *Assert*: `operand0` is not `void`.
	4. *If* `ToBoolean(operand0)` is `false`:
		1. *Return:* `operand0`.
	5. *Return:* `Assess(expr.children.1)`.
;

Object! Assess(SemanticOperation[operator: OR] expr) :=
	1. *Assert:* `expr.children.count` is 2.
	2. *Let* `operand0` be *Unwrap:* `Assess(expr.children.0)`.
	3. *Assert*: `operand0` is not `void`.
	4. *If* `ToBoolean(operand0)` is `true`:
		1. *Return:* `operand0`.
	5. *Return:* `Assess(expr.children.1)`.
;

Object! Assess(SemanticOperation[operator: COND] expr) :=
	1. *Assert:* `expr.children.count` is 3.
	2. *Let* `condition` be *Unwrap:* `Assess(expr.children.0)`.
	3. *Assert:* `condition` is of type `Boolean`.
	4. *If* `condition` is `true`:
		1. *Return:* `Assess(expr.children.1)`.
	5. *Else:*
		1. *Return:* `Assess(expr.children.2)`.
;
