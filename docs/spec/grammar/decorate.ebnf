Decorate(Word ::= IDENTIFIER) -> SemanticKey
	:= (SemanticKey[id=TokenWorth(IDENTIFIER)]);
Decorate(Word ::= KEYWORD) -> SemanticKey
	:= (SemanticKey[id=TokenWorth(KEYWORD)]);



Decorate(PrimitiveLiteral ::= "null") -> SemanticConstant
	:= (SemanticConstant[value=null]);
Decorate(PrimitiveLiteral ::= "false") -> SemanticConstant
	:= (SemanticConstant[value=false]);
Decorate(PrimitiveLiteral ::= "true") -> SemanticConstant
	:= (SemanticConstant[value=true]);
Decorate(PrimitiveLiteral ::= INTEGER) -> SemanticConstant
	:= (SemanticConstant[value=Integer(TokenWorth(INTEGER))]);
Decorate(PrimitiveLiteral ::= FLOAT) -> SemanticConstant
	:= (SemanticConstant[value=Float(TokenWorth(FLOAT))]);
Decorate(PrimitiveLiteral ::= STRING) -> SemanticConstant
	:= (SemanticConstant[value=String(TokenWorth(STRING))]);



Decorate(TypeKeyword ::= "bool") -> SemanticTypeConstant
	:= (SemanticTypeConstant[value=Boolean]);
Decorate(TypeKeyword ::= "int") -> SemanticTypeConstant
	:= (SemanticTypeConstant[value=Integer]);
Decorate(TypeKeyword ::= "float") -> SemanticTypeConstant
	:= (SemanticTypeConstant[value=Float]);
Decorate(TypeKeyword ::= "str") -> SemanticTypeConstant
	:= (SemanticTypeConstant[value=String]);
Decorate(TypeKeyword ::= "obj") -> SemanticTypeConstant
	:= (SemanticTypeConstant[value=Object]);



Decorate(PropertyType ::= Word ":" Type) -> SemanticPropertyType
	:= (SemanticPropertyType
		Decorate(Word)
		Decorate(Type)
	);



Decorate(TypeTupleLiteral ::= "[" "]") -> SemanticTypeTuple
	:= (SemanticTypeTuple);
Decorate(TypeTupleLiteral ::= "[" ","? TypeTupleLiteral__0__List ","? "]") -> SemanticTypeTuple
	:= (SemanticTypeTuple
		...Decorate(TypeTupleLiteral__0__List)
	);

	Decorate(TypeTupleLiteral__0__List ::= Type) -> Sequence<SemanticType>
		:= [Decorate(Type)];
	Decorate(TypeTupleLiteral__0__List ::= TypeTupleLiteral__0__List "," Type) -> Sequence<SemanticType>
		:= [
			...Decorate(TypeTupleLiteral__0__List),
			Decorate(Type),
		];

Decorate(TypeRecordLiteral ::= "[" ","? TypeRecordLiteral__0__List ","? "]") -> SemanticTypeRecord
	:= (SemanticTypeRecord
		...Decorate(TypeRecordLiteral__0__List)
	);

	Decorate(TypeRecordLiteral__0__List ::= PropertyType) -> Sequence<SemanticPropertyType>
		:= [Decorate(PropertyType)];
	Decorate(TypeRecordLiteral__0__List ::= TypeRecordLiteral__0__List "," PropertyType) -> Sequence<SemanticPropertyType>
		:= [
			...Decorate(TypeRecordLiteral__0__List),
			Decorate(PropertyType),
		];



Decorate(TypeUnit ::= IDENTIFIER) -> SemanticTypeAlias
	:= (SemanticTypeAlias[id=TokenWorth(IDENTIFIER)]);
Decorate(TypeUnit ::= PrimitiveLiteral) -> SemanticTypeConstant
	:= (SemanticTypeConstant[value=ToType(Decorate(PrimitiveLiteral).value)]);
Decorate(TypeUnit ::= TypeKeyword) -> SemanticTypeConstant
	:= Decorate(TypeKeyword);
Decorate(TypeUnit ::= TypeTupleLiteral) -> SemanticTypeTuple
	:= Decorate(TypeTupleLiteral);
Decorate(TypeUnit ::= TypeRecordLiteral) -> SemanticTypeRecord
	:= Decorate(TypeRecordLiteral);
Decorate(TypeUnit ::= "(" Type ")") -> SemanticType
	:= Decorate(Type);



Decorate(TypeUnarySymbol ::= TypeUnit) -> SemanticType
	:= Decorate(TypeUnit);
Decorate(TypeUnarySymbol ::= TypeUnarySymbol "!") -> SemanticTypeOperation
	:= (SemanticTypeOperation[operator=ORNULL]
		Decorate(TypeUnarySymbol)
	);



Decorate(TypeIntersection ::= TypeUnarySymbol) -> SemanticType
	:= Decorate(TypeUnarySymbol);
Decorate(TypeIntersection ::= TypeIntersection "&" TypeUnarySymbol) -> SemanticTypeOperation
	:= (SemanticTypeOperation[operator=AND]
		Decorate(TypeIntersection)
		Decorate(TypeUnarySymbol)
	);



Decorate(TypeUnion ::= TypeIntersection) -> SemanticType
	:= Decorate(TypeIntersection);
Decorate(TypeUnion ::= TypeUnion "|" TypeIntersection) -> SemanticTypeOperation
	:= (SemanticTypeOperation[operator=OR]
		Decorate(TypeUnion)
		Decorate(TypeIntersection)
	);



Decorate(Type ::= TypeUnion) -> SemanticType
	:= Decorate(TypeUnion);



Decorate(StringTemplate ::= TEMPLATE_FULL) -> SemanticTemplate
	:= (SemanticTemplate
		(SemanticConstant[value=String(TokenWorth(TEMPLATE_FULL))])
	);
Decorate(StringTemplate ::= TEMPLATE_HEAD TEMPLATE_TAIL) -> SemanticTemplate
	:= (SemanticTemplate
		(SemanticConstant[value=String(TokenWorth(TEMPLATE_HEAD))])
		(SemanticConstant[value=String(TokenWorth(TEMPLATE_TAIL))])
	);
Decorate(StringTemplate ::= TEMPLATE_HEAD Expression TEMPLATE_TAIL) -> SemanticTemplate
	:= (SemanticTemplate
		(SemanticConstant[value=String(TokenWorth(TEMPLATE_HEAD))])
		Decorate(Expression)
		(SemanticConstant[value=String(TokenWorth(TEMPLATE_TAIL))])
	);
Decorate(StringTemplate ::= TEMPLATE_HEAD StringTemplate__0__List TEMPLATE_TAIL) -> SemanticTemplate
	:= (SemanticTemplate
		(SemanticConstant[value=String(TokenWorth(TEMPLATE_HEAD))])
		...Decorate(StringTemplate__0__List)
		(SemanticConstant[value=String(TokenWorth(TEMPLATE_TAIL))])
	);
Decorate(StringTemplate ::= TEMPLATE_HEAD Expression StringTemplate__0__List TEMPLATE_TAIL) -> SemanticTemplate
	:= (SemanticTemplate
		(SemanticConstant[value=String(TokenWorth(TEMPLATE_HEAD))])
		Decorate(Expression)
		...Decorate(StringTemplate__0__List)
		(SemanticConstant[value=String(TokenWorth(TEMPLATE_TAIL))])
	);

	Decorate(StringTemplate__0__List ::= TEMPLATE_MIDDLE) -> Vector<SemanticConstant>
		:= [SemanticConstant[value=String(TokenWorth(TEMPLATE_MIDDLE))]];
	Decorate(StringTemplate__0__List ::= TEMPLATE_MIDDLE Expression) -> Vector<SemanticConstant, SemanticExpression>
		:= [
			(SemanticConstant[value=String(TokenWorth(TEMPLATE_MIDDLE))]),
			Decorate(Expression),
		];
	Decorate(StringTemplate__0__List ::= StringTemplate__0__List TEMPLATE_MIDDLE) -> Sequence<...Vector<SemanticConstant, SemanticExpression?>>
		:= [
			...Decorate(StringTemplate__0__List),
			(SemanticConstant[value=String(TokenWorth(TEMPLATE_MIDDLE))]),
		];
	Decorate(StringTemplate__0__List ::= StringTemplate__0__List TEMPLATE_MIDDLE Expression) -> Sequence<...Vector<SemanticConstant, SemanticExpression?>>
		:= [
			...Decorate(StringTemplate__0__List),
			(SemanticConstant[value=String(TokenWorth(TEMPLATE_MIDDLE))]),
			Decorate(Expression),
		];



Decorate(Property ::= Word "=" Expression) -> SemanticProperty
	:= (SemanticProperty
		Decorate(Word)
		Decorate(Expression)
	);

Decorate(Case ::= Expression "|->" Expression) -> SemanticCase
	:= (SemanticCase
		Decorate(Expression)
		Decorate(Expression)
	);

Decorate(TupleLiteral ::= "[" "]") -> SemanticTuple
	:= (SemanticTuple);
Decorate(TupleLiteral ::= "[" ","? TupleLiteral__0__List ","? "]") -> SemanticTuple
	:= (SemanticTuple
		...Decorate(TupleLiteral__0__List)
	);

	Decorate(TupleLiteral__0__List ::= Expression) -> Sequence<SemanticExpression>
		:= [Decorate(Expression)];
	Decorate(TupleLiteral__0__List ::= TupleLiteral__0__List "," Expression) -> Sequence<SemanticExpression>
		:= [
			...Decorate(TupleLiteral__0__List),
			Decorate(Expression),
		];

Decorate(RecordLiteral ::= "[" ","? RecordLiteral__0__List ","? "]") -> SemanticRecord
	:= (SemanticRecord
		...Decorate(RecordLiteral__0__List)
	);

	Decorate(RecordLiteral__0__List ::= Property) -> Sequence<SemanticProperty>
		:= [Decorate(Property)];
	Decorate(RecordLiteral__0__List ::= RecordLiteral__0__List "," Property) -> Sequence<SemanticProperty>
		:= [
			...Decorate(RecordLiteral__0__List),
			Decorate(Property),
		];

Decorate(MappingLiteral ::= "[" ","? MappingLiteral__0__List ","? "]") -> SemanticMapping
	:=(SemanticMapping
		...Decorate(MappingLiteral__0__List)
	);

	Decorate(MappingLiteral__0__List ::= Case) -> Sequence<SemanticCase>
		:= [Decorate(Case)];
	Decorate(MappingLiteral__0__List ::= MappingLiteral__0__List "," Case) -> Sequence<SemanticCase>
		:= [
			...Decorate(MappingLiteral__0__List),
			Decorate(Case),
		];



Decorate(ExpressionUnit ::= IDENTIFIER) -> SemanticVariable
	:= (SemanticVariable[id=TokenWorth(IDENTIFIER)]);
Decorate(ExpressionUnit ::= PrimitiveLiteral) -> SemanticConstant
	:= Decorate(PrimitiveLiteral);
Decorate(ExpressionUnit ::= StringTemplate) -> SemanticTemplate
	:= Decorate(StringTemplate);
Decorate(ExpressionUnit ::= TupleLiteral) -> SemanticTuple
	:= Decorate(TupleLiteral);
Decorate(ExpressionUnit ::= RecordLiteral) -> SemanticRecord
	:= Decorate(RecordLiteral);
Decorate(ExpressionUnit ::= MappingLiteral) -> SemanticMapping
	:= Decorate(MappingLiteral);
Decorate(ExpressionUnit ::= "(" Expression ")") -> SemanticExpression
	:= Decorate(Expression);



Decorate(PropertyAccess ::= "." INTEGER) -> SemanticIndex
	:= (SemanticIndex
		(SemanticConstant[value=Integer(TokenWorth(INTEGER))])
	);
Decorate(PropertyAccess ::= "." Word) -> SemanticKey
	:= Decorate(Word);
Decorate(PropertyAccess ::= "." "[" Expression "]") -> SemanticExpression
	:= Decorate(Expression);



Decorate(ExpressionCompound ::= ExpressionUnit) -> SemanticExpression
	:= Decorate(ExpressionUnit);
Decorate(ExpressionCompound ::= ExpressionCompound PropertyAccess) -> SemanticAccess
	:= (SemanticAccess
		Decorate(ExpressionCompound)
		Decorate(PropertyAccess)
	);



Decorate(ExpressionUnarySymbol ::= ExpressionCompound) -> SemanticExpression
	:= Decorate(ExpressionCompound);
Decorate(ExpressionUnarySymbol ::= "!" ExpressionUnarySymbol) -> SemanticOperation
	:= (SemanticOperation[operator=NOT]
		Decorate(ExpressionUnarySymbol)
	);
Decorate(ExpressionUnarySymbol ::= "?" ExpressionUnarySymbol) -> SemanticOperation
	:= (SemanticOperation[operator=EMP]
		Decorate(ExpressionUnarySymbol)
	);
Decorate(ExpressionUnarySymbol ::= "+" ExpressionUnarySymbol) -> SemanticExpression
	:= Decorate(ExpressionUnarySymbol);
Decorate(ExpressionUnarySymbol ::= "-" ExpressionUnarySymbol) -> SemanticOperation
	:= (SemanticOperation[operator=NEG]
		Decorate(ExpressionUnarySymbol)
	);



Decorate(ExpressionExponential ::= ExpressionUnarySymbol) -> SemanticExpression
	:= Decorate(ExpressionUnarySymbol);
Decorate(ExpressionExponential ::= ExpressionUnarySymbol "^" ExpressionExponential) -> SemanticOperation
	:= (SemanticOperation[operator=EXP]
		Decorate(ExpressionUnarySymbol)
		Decorate(ExpressionExponential)
	);



Decorate(ExpressionMultiplicative ::= ExpressionExponential) -> SemanticExpression
	:= Decorate(ExpressionExponential);
Decorate(ExpressionMultiplicative ::= ExpressionMultiplicative "*" ExpressionExponential) -> SemanticOperation
	:= (SemanticOperation[operator=MUL]
		Decorate(ExpressionMultiplicative)
		Decorate(ExpressionExponential)
	);
Decorate(ExpressionMultiplicative ::= ExpressionMultiplicative "/" ExpressionExponential) -> SemanticOperation
	:= (SemanticOperation[operator=DIV]
		Decorate(ExpressionMultiplicative)
		Decorate(ExpressionExponential)
	);



Decorate(ExpressionAdditive ::= ExpressionMultiplicative) -> SemanticExpression
	:= Decorate(ExpressionMultiplicative);
Decorate(ExpressionAdditive ::= ExpressionAdditive "+" ExpressionMultiplicative) -> SemanticOperation
	:= (SemanticOperation[operator=ADD]
		Decorate(ExpressionAdditive)
		Decorate(ExpressionMultiplicative)
	);
Decorate(ExpressionAdditive ::= ExpressionAdditive "-" ExpressionMultiplicative) -> SemanticOperation
	:= (SemanticOperation[operator=ADD]
		Decorate(ExpressionAdditive)
		(SemanticOperation[operator=NEG] Decorate(ExpressionMultiplicative))
	);



Decorate(ExpressionComparative ::= ExpressionAdditive) -> SemanticOperation
	:= Decorate(ExpressionAdditive);
Decorate(ExpressionComparative ::= ExpressionComparative "<" ExpressionAdditive) -> SemanticOperation
	:= (SemanticOperation[operator=LT]
		Decorate(ExpressionComparative)
		Decorate(ExpressionAdditive)
	);
Decorate(ExpressionComparative ::= ExpressionComparative ">" ExpressionAdditive) -> SemanticOperation
	:= (SemanticOperation[operator=GT]
		Decorate(ExpressionComparative)
		Decorate(ExpressionAdditive)
	);
Decorate(ExpressionComparative ::= ExpressionComparative "<=" ExpressionAdditive) -> SemanticOperation
	:= (SemanticOperation[operator=LE]
		Decorate(ExpressionComparative)
		Decorate(ExpressionAdditive)
	);
Decorate(ExpressionComparative ::= ExpressionComparative ">=" ExpressionAdditive) -> SemanticOperation
	:= (SemanticOperation[operator=GE]
		Decorate(ExpressionComparative)
		Decorate(ExpressionAdditive)
	);
Decorate(ExpressionComparative ::= ExpressionComparative "!<" ExpressionAdditive) -> SemanticOperation
	:= (SemanticOperation[operator=NOT]
		(SemanticOperation[operator=LT]
			Decorate(ExpressionComparative)
			Decorate(ExpressionAdditive)
		)
	);
Decorate(ExpressionComparative ::= ExpressionComparative "!>" ExpressionAdditive) -> SemanticOperation
	:= (SemanticOperation[operator=NOT]
		(SemanticOperation[operator=GT]
			Decorate(ExpressionComparative)
			Decorate(ExpressionAdditive)
		)
	);
Decorate(ExpressionComparative ::= ExpressionComparative "is" ExpressionAdditive) -> SemanticOperation
	:= (SemanticOperation[operator=IS]
		Decorate(ExpressionComparative)
		Decorate(ExpressionAdditive)
	);
Decorate(ExpressionComparative ::= ExpressionComparative "isnt" ExpressionAdditive) -> SemanticOperation
	:= (SemanticOperation[operator=NOT]
		(SemanticOperation[operator=IS]
			Decorate(ExpressionComparative)
			Decorate(ExpressionAdditive)
		)
	);



Decorate(ExpressionEquality ::= ExpressionComparative) -> SemanticOperation
	:= Decorate(ExpressionComparative);
Decorate(ExpressionEquality ::= ExpressionEquality "===" ExpressionComparative) -> SemanticOperation
	:= (SemanticOperation[operator=ID]
		Decorate(ExpressionEquality)
		Decorate(ExpressionComparative)
	);
Decorate(ExpressionEquality ::= ExpressionEquality "!==" ExpressionComparative) -> SemanticOperation
	:= (SemanticOperation[operator=NOT]
		(SemanticOperation[operator=ID]
			Decorate(ExpressionEquality)
			Decorate(ExpressionComparative)
		)
	);
Decorate(ExpressionEquality ::= ExpressionEquality "==" ExpressionComparative) -> SemanticOperation
	:= (SemanticOperation[operator=EQ]
		Decorate(ExpressionEquality)
		Decorate(ExpressionComparative)
	);
Decorate(ExpressionEquality ::= ExpressionEquality "!=" ExpressionComparative) -> SemanticOperation
	:= (SemanticOperation[operator=NOT]
		(SemanticOperation[operator=EQ]
			Decorate(ExpressionEquality)
			Decorate(ExpressionComparative)
		)
	);



Decorate(ExpressionConjunctive ::= ExpressionEquality) -> SemanticExpression
	:= Decorate(ExpressionEquality);
Decorate(ExpressionConjunctive ::= ExpressionConjunctive "&&" ExpressionEquality) -> SemanticOperation
	:= (SemanticOperation[operator=AND]
		Decorate(ExpressionConjunctive)
		Decorate(ExpressionEquality)
	);
Decorate(ExpressionConjunctive ::= ExpressionConjunctive "!&" ExpressionEquality) -> SemanticOperation
	:= (SemanticOperation[operator=NOT]
		(SemanticOperation[operator=AND]
			Decorate(ExpressionConjunctive)
			Decorate(ExpressionEquality)
		)
	);



Decorate(ExpressionDisjunctive ::= ExpressionConjunctive) -> SemanticOperation
	:= Decorate(ExpressionConjunctive);
Decorate(ExpressionDisjunctive ::= ExpressionDisjunctive "||" ExpressionConjunctive) -> SemanticOperation
	:= (SemanticOperation[operator=OR]
		Decorate(ExpressionDisjunctive)
		Decorate(ExpressionConjunctive)
	);
Decorate(ExpressionDisjunctive ::= ExpressionDisjunctive "!|" ExpressionConjunctive) -> SemanticOperation
	:= (SemanticOperation[operator=NOT]
		(SemanticOperation[operator=OR]
			Decorate(ExpressionDisjunctive)
			Decorate(ExpressionConjunctive)
		)
	);



Decorate(ExpressionConditional ::= "if" Expression__0 "then" Expression__1 "else" Expression__2)
	:= (SemanticOperation[operator=COND]
		Decorate(Expression__0)
		Decorate(Expression__1)
		Decorate(Expression__2)
	);



Decorate(Expression ::= ExpressionDisjunctive) -> SemanticExpression
	:= Decorate(ExpressionDisjunctive);
Decorate(Expression ::= ExpressionConditional) -> SemanticExpression
	:= Decorate(ExpressionConditional);



Decorate(DeclarationType ::= "type" IDENTIFIER "=" Type ";") -> SemanticDeclarationType
	:= (SemanticDeclarationType
		(SemanticTypeAlias[id=TokenWorth(IDENTIFIER)])
		Decorate(Type)
	);



Decorate(DeclarationVariable ::= "let" IDENTIFIER ":" Type "=" Expression ";") -> SemanticDeclarationVariable
	:= (SemanticDeclarationVariable[unfixed=false]
		(SemanticVariable[id=TokenWorth(IDENTIFIER)])
		Decorate(Type)
		Decorate(Expression)
	);
Decorate(DeclarationVariable ::= "let" "unfixed" IDENTIFIER ":" Type "=" Expression ";") -> SemanticDeclarationVariable
	:= (SemanticDeclarationVariable[unfixed=true]
		(SemanticVariable[id=TokenWorth(IDENTIFIER)])
		Decorate(Type)
		Decorate(Expression)
	);



Decorate(Declaration ::= DeclarationType) -> SemanticDeclarationType
	:= Decorate(DeclarationType);
Decorate(Declaration ::= DeclarationVariable) -> SemanticDeclarationVariable
	:= Decorate(DeclarationVariable);



Decorate(Assignee ::= IDENTIFIER) -> SemanticVariable
	:= (SemanticVariable[id=TokenWorth(IDENTIFIER)]);

Decorate(StatementAssignment ::= Assignee "=" Expression ";") -> SemanticAssignment
	:= (SemanticAssignment
		Decorate(Assignee)
		Decorate(Expression)
	);



Decorate(Statement ::= ";") -> SemanticStatementExpression
	:= (SemanticStatementExpression);
Decorate(Statement ::= Expression ";") -> SemanticStatementExpression
	:= (SemanticStatementExpression Decorate(Expression));
Decorate(Statement ::= Declaration) -> SemanticDeclaration
	:= Decorate(Declaration);
Decorate(Statement ::= StatementAssignment) -> SemanticAssignment
	:= Decorate(StatementAssignment);



Decorate(Statement__List ::= Statement) -> Sequence<SemanticStatement>
	:= [Decorate(Statement)];
Decorate(Statement__List ::= Statement__List Statement) -> Sequence<SemanticStatement>
	:= [
		...Decorate(Statement__List),
		Decorate(Statement),
	];



Decorate(Goal ::= #x02 #x03) -> SemanticGoal
	:= (SemanticGoal);
Decorate(Goal ::= #x02 Statement__List #x03) -> SemanticGoal
	:= (SemanticGoal Decorate(Statement__List));
