// KEYWORD         ::= [./lexicon.ebnf#Keyword];
// IDENTIFIER      ::= [./lexicon.ebnf#Identifier];
// INTEGER         ::= [./lexicon.ebnf#Integer];
// FLOAT           ::= [./lexicon.ebnf#Float];
// STRING          ::= [./lexicon.ebnf#String];
// TEMPLATE_FULL   ::= [./lexicon.ebnf#TemplateFull];
// TEMPLATE_HEAD   ::= [./lexicon.ebnf#TemplateHead];
// TEMPLATE_MIDDLE ::= [./lexicon.ebnf#TempalteMiddle];
// TEMPLATE_TAIL   ::= [./lexicon.ebnf#TempalteTail];



Word ::=
	| KEYWORD
	| IDENTIFIER
;



PrimitiveLiteral ::=
	| "null"
	| "false"
	| "true"
	| INTEGER
	| FLOAT
	| STRING
;



TypeKeyword ::=
	| "bool"
	| "int"
	| "float"
	| "obj"
;

TypeProperty
	::= Word ":" Type;

TypeTupleLiteral  ::= "[" ","? Type#         ","? "]";
TypeRecordLiteral ::= "[" ","? TypeProperty# ","? "]";

TypeUnit ::=
	| "[" "]"
	| IDENTIFIER
	| PrimitiveLiteral
	| TypeKeyword
	| TypeTupleLiteral
	| TypeRecordLiteral
	| "(" Type ")"
;

TypeUnarySymbol ::=
	| TypeUnit
	| TypeUnarySymbol "!"
;

TypeIntersection ::= (TypeIntersection "&")? TypeUnarySymbol;
TypeUnion        ::= (TypeUnion        "|")? TypeIntersection;

Type ::=
	| TypeUnion
;



StringTemplate ::=
	| TEMPLATE_FULL
	| TEMPLATE_HEAD Expression? (TEMPLATE_MIDDLE Expression?)* TEMPLATE_TAIL
;

Property ::= Word        "="   Expression;
Case     ::= Expression# "|->" Expression;

ListLiteral    ::= "[" ","? Expression# ","? "]";
RecordLiteral  ::= "[" ","? Property#   ","? "]";
MappingLiteral ::= "[" ","? Case#       ","? "]";

ExpressionUnit ::=
	| "[" "]"
	| IDENTIFIER
	| PrimitiveLiteral
	| StringTemplate
	| ListLiteral
	| RecordLiteral
	| MappingLiteral
	| "(" Expression ")"
;

ExpressionUnarySymbol ::=
	| ExpressionUnit
	| ("!" | "?" | "+" | "-") ExpressionUnarySymbol
;

ExpressionExponential
	::= ExpressionUnarySymbol ("^" ExpressionExponential)?;

ExpressionMultiplicative ::= (ExpressionMultiplicative ("*" | "/" ))?                            ExpressionExponential;
ExpressionAdditive       ::= (ExpressionAdditive       ("+" | "-" ))?                            ExpressionMultiplicative;
ExpressionComparative    ::= (ExpressionComparative    ("<" | ">" | "<=" | ">=" | "!<" | "!>"))? ExpressionAdditive;
ExpressionEquality       ::= (ExpressionEquality       ("is" | "isnt" | "==" | "!="))?           ExpressionComparative;
ExpressionConjunctive    ::= (ExpressionConjunctive    ("&&" | "!&"))?                           ExpressionEquality;
ExpressionDisjunctive    ::= (ExpressionDisjunctive    ("||" | "!|"))?                           ExpressionConjunctive;

ExpressionConditional
	::= "if" Expression "then" Expression "else" Expression;

Expression ::=
	| ExpressionDisjunctive
	| ExpressionConditional
;



DeclarationVariable ::= "let"  "unfixed"? IDENTIFIER ":" Type "=" Expression ";";
DeclarationType     ::= "type"            IDENTIFIER "=" Type                ";";

Declaration ::=
	| DeclarationVariable
	| DeclarationType
;

StatementAssignment
	::= IDENTIFIER "=" Expression ";";

Statement ::=
	| Expression? ";"
	| Declaration
	| StatementAssignment
;



Goal ::= #x02 Statement* #x03;
