// IDENTIFIER      ::= [./lexicon.ebnf#Identifier];
// INTEGER         ::= [./lexicon.ebnf#Integer];
// FLOAT           ::= [./lexicon.ebnf#Float];
// STRING          ::= [./lexicon.ebnf#String];
// TEMPLATE_FULL   ::= [./lexicon.ebnf#TemplateFull];
// TEMPLATE_HEAD   ::= [./lexicon.ebnf#TemplateHead];
// TEMPLATE_MIDDLE ::= [./lexicon.ebnf#TempalteMiddle];
// TEMPLATE_TAIL   ::= [./lexicon.ebnf#TempalteTail];



PrimitiveLiteral ::=
	| "null"
	| "false"
	| "true"
	| INTEGER
	| FLOAT
	| STRING
;



TypeKeyword ::=
	| "bool"
	| "int"
	| "float"
	| "obj"
;

TypeUnit ::=
	| PrimitiveLiteral
	| TypeKeyword
	| "(" Type ")"
;

TypeUnarySymbol ::=
	| TypeUnit
	| TypeUnarySymbol "!"
;

TypeIntersection ::= (TypeIntersection "&")? TypeUnarySymbol;
TypeUnion        ::= (TypeUnion        "|")? TypeIntersection;

Type ::=
	| TypeUnion
;



StringTemplate<Dynamic> ::=
	| TEMPLATE_FULL
	| TEMPLATE_HEAD Expression<?Dynamic>? (TEMPLATE_MIDDLE Expression<?Dynamic>?)* TEMPLATE_TAIL
;

ExpressionUnit<Dynamic> ::=
	| <Dynamic+>IDENTIFIER
	| PrimitiveLiteral
	| StringTemplate<?Dynamic>
	| "(" Expression<?Dynamic> ")"
;

ExpressionUnarySymbol<Dynamic> ::=
	| ExpressionUnit<?Dynamic>
	| ("!" | "?" | "+" | "-") ExpressionUnarySymbol<?Dynamic>
;

ExpressionExponential<Dynamic>
	::= ExpressionUnarySymbol<?Dynamic> ("^" ExpressionExponential<?Dynamic>)?;

ExpressionMultiplicative <Dynamic> ::= (ExpressionMultiplicative <?Dynamic> ("*" | "/" ))?                            ExpressionExponential    <?Dynamic>;
ExpressionAdditive       <Dynamic> ::= (ExpressionAdditive       <?Dynamic> ("+" | "-" ))?                            ExpressionMultiplicative <?Dynamic>;
ExpressionComparative    <Dynamic> ::= (ExpressionComparative    <?Dynamic> ("<" | ">" | "<=" | ">=" | "!<" | "!>"))? ExpressionAdditive       <?Dynamic>;
ExpressionEquality       <Dynamic> ::= (ExpressionEquality       <?Dynamic> ("is" | "isnt" | "==" | "!="))?           ExpressionComparative    <?Dynamic>;
ExpressionConjunctive    <Dynamic> ::= (ExpressionConjunctive    <?Dynamic> ("&&" | "!&"))?                           ExpressionEquality       <?Dynamic>;
ExpressionDisjunctive    <Dynamic> ::= (ExpressionDisjunctive    <?Dynamic> ("||" | "!|"))?                           ExpressionConjunctive    <?Dynamic>;

ExpressionConditional<Dynamic>
	::= "if" Expression<?Dynamic> "then" Expression<?Dynamic> "else" Expression<?Dynamic>;

Expression<Dynamic> ::=
	| ExpressionDisjunctive<?Dynamic>
	| ExpressionConditional<?Dynamic>
;



DeclarationVariable
	::= "let" "unfixed"? IDENTIFIER ":" Type "=" Expression<+Dynamic> ";";

StatementAssignment
	::= IDENTIFIER "=" Expression<+Dynamic> ";";

Statement ::=
	| Expression<+Dynamic>? ";"
	| DeclarationVariable
	| StatementAssignment
;



Goal ::= #x02 Statement* #x03;
