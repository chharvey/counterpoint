Void! TypeCheck(Or<
	SemanticKey,
	SemanticPropertyType
	SemanticProperty,
	SemanticCase,
	SemanticStatementExpression,
	SemanticGoal,
> list) :=
	1. *For each* `it` in `list.children`:
		1. *Perform:* *Unwrap:* `TypeCheck(it)`.
;



Void TypeCheck(SemanticType type) :=
	1. *Return*.
;



Void! TypeCheck(SemanticExpression expr) :=
	1. *Perform:* *Unwrap:* `TypeOf(expr)`.
		1. *Note:* The result of this step is not used; it is only performed to rethrow any TypeErrors.
;



Void TypeCheck(SemanticDeclarationType decl) :=
	1. *Assert:* `decl.children.count` is 2.
	2. *Perform:* *UnwrapAffirm:* `TypeCheck(decl.children.1)`.
	3. *If* the validator’s symbol table contains a SymbolStructure `symbol` whose `id` is `decl.children.0.id`:
		1. *Assert:* `symbol` is an instance of `SymbolStructureType`.
		2. *Set* `symbol.value` to *UnwrapAffirm:* `Assess(decl.children.1)`.
;



Void! TypeCheck(SemanticDeclarationVariable decl) :=
	1. *Assert:* `decl.children.count` is 3.
	2. *Perform:* *UnwrapAffirm:* `TypeCheck(decl.children.1)`.
	3. *Perform:* *UnwrapAffirm:* `TypeCheck(decl.children.2)`.
	4. *Let* `assignee_type` be *UnwrapAffirm:* `Assess(decl.children.1)`.
	5. *Let* `assigned_type` be *Unwrap:* `TypeOf(decl.children.2)`.
	6. *If* `assigned_type` is not a subtype of `assignee_type`:
		1. *Throw:* a new TypeError03.
	7. *If* the validator’s symbol table contains a SymbolStructure `symbol` whose `id` is `decl.children.0.id`:
		1. *Assert:* `symbol` is an instance of `SymbolStructureVar`.
		2. *Set* `symbol.type` to *UnwrapAffirm:* `Assess(decl.children.1)`.
		3. *If* `decl.unfixed` is `false`:
			1. *Assert:* `symbol.unfixed` is `false`.
			2. *Set* `symbol.value` to `Assess(decl.children.2)`.
;



Void! TypeCheck(SemanticAssignment stmt) :=
	1. *Assert:* `stmt.children.count` is 2.
	2. *Perform:* *UnwrapAffirm:* `TypeCheck(decl.children.1)`.
	3. *Let* `assignee_type` be *Unwrap:* `TypeOf(stmt.children.0)`.
	4. *Let* `assigned_type` be *Unwrap:* `TypeOf(stmt.children.1)`.
	5. *If* `assigned_type` is not a subtype of `assignee_type`:
		1. *Throw:* a new TypeError03.
;
